[
  {
    "line_number": 3,
    "question": "For each Department Name, what percentage of their suppliers are within the same ZIP code?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "supplier_zip_code": "$supplier_zip_code"
            },
            "suppliers": {
              "$addToSet": "$supplier_name"
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.department_name",
            "local_suppliers": {
              "$sum": {
                "$cond": [
                  {
                    "$eq": [
                      "$_id.supplier_zip_code",
                      "$location"
                    ]
                  },
                  1,
                  0
                ]
              }
            },
            "total_suppliers": {
              "$sum": 1
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "department_name": "$_id",
            "local_supplier_percentage": {
              "$multiply": [
                {
                  "$divide": [
                    "$local_suppliers",
                    "$total_suppliers"
                  ]
                },
                100
              ]
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148282, 8), 'signature': {'hash': b'\\x9b\\x90D{\\xa9\\x8cy\\xe3\\x9a\\x1b\\xa2!O\\x86\\x954r+C\\xaf', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148282, 8)}"
  },
  {
    "line_number": 6,
    "question": "What is the distribution of Purchase Date gaps between consecutive orders for each Department?",
    "error": "Error processing question: Error generating query: Expecting ',' delimiter: line 52 column 26 (char 1312)"
  },
  {
    "line_number": 7,
    "question": "Which Commodity Titles show the highest price variance across different suppliers?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "commodity_title": "$commodity_title",
              "supplier_name": "$supplier_name"
            },
            "total_price": {
              "$sum": "$total_price"
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.commodity_title",
            "prices": {
              "$push": "$total_price"
            }
          }
        },
        {
          "$addFields": {
            "price_variance": {
              "$let": {
                "vars": {
                  "prices": "$prices"
                },
                "in": {
                  "$let": {
                    "vars": {
                      "mean": {
                        "$avg": "$$prices"
                      }
                    },
                    "in": {
                      "$stdDevPop": {
                        "$map": {
                          "input": "$$prices",
                          "as": "price",
                          "in": {
                            "$subtract": [
                              "$$price",
                              "$$mean"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "$sort": {
            "price_variance": -1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148298, 8), 'signature': {'hash': b'\\xd4e\\xc03\\xc07$4\\x1a43\\x05\"\\x80B|+\\xa8d\\xa4', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148298, 8)}"
  },
  {
    "line_number": 12,
    "question": "What is the typical time gap between Requisition Number creation and actual Purchase Date?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$project": {
            "requisition_number": 1,
            "creation_date": {
              "$dateFromString": {
                "date_string": "$creation_date"
              }
            },
            "purchase_date": {
              "$dateFromString": {
                "date_string": "$purchase_date"
              }
            }
          }
        },
        {
          "$group": {
            "_id": null,
            "avg_time_diff": {
              "$avg": {
                "$subtract": [
                  "$purchase_date",
                  "$creation_date"
                ]
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $project :: caused by :: Unrecognized argument to $dateFromString: date_string, full error: {'ok': 0.0, 'errmsg': 'Invalid $project :: caused by :: Unrecognized argument to $dateFromString: date_string', 'code': 40541, 'codeName': 'Location40541', '$clusterTime': {'clusterTime': Timestamp(1737148311, 33), 'signature': {'hash': b'\\x07\\x13\\xc7#\\x8b\\x95\\x0e\\x96\\xa5\\x91\\x83\\x01n\\xfeRz\\xfa\\x8b\\x11F', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148311, 33)}"
  },
  {
    "line_number": 13,
    "question": "Which Class Titles show consistent pricing across different Supplier Codes?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "class_title": "$class_title",
              "supplier_code": "$supplier_code"
            },
            "prices": {
              "$push": "$unit_price"
            }
          }
        },
        {
          "$addFields": {
            "price_range": {
              "$subtract": [
                {
                  "$max": "$prices"
                },
                {
                  "$min": "$prices"
                }
              ]
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.class_title",
            "supplier_codes": {
              "$push": "$_id.supplier_code"
            },
            "price_ranges": {
              "$push": "$price_range"
            }
          }
        },
        {
          "$match": {
            "supplier_codes": {
              "$size": {
                "$gt": 1
              }
            },
            "price_ranges": {
              "$max": 0
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Failed to parse $size. Expected a number in: $size: { $gt: 1 }, full error: {'ok': 0.0, 'errmsg': 'Failed to parse $size. Expected a number in: $size: { $gt: 1 }', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737148315, 16), 'signature': {'hash': b'\\xc1\\x06J\\xceI\\x83\\xb9-\\xc2mJv\\x97\\x9er\\xb3\\xbd\\xe4|o', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148315, 16)}"
  },
  {
    "line_number": 14,
    "question": "How does the Quantity ordered correlate with Unit Price across different Sub-Acquisition Types?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "sub_acquisition_type": "$sub_acquisition_type",
              "unit_price": "$unit_price"
            },
            "total_quantity": {
              "$sum": "$quantity"
            }
          }
        },
        {
          "$sort": {
            "_id.unit_price": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting., full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting.', 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148317, 28), 'signature': {'hash': b'h\\xda4\\x90) \\xfb\\x9a\\xb6\\xdeu;\\xd48\\xfc\\x82S/\\xa8\\xd4', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148317, 28)}"
  },
  {
    "line_number": 15,
    "question": "What is the distribution of Total Price within each Normalized UNSPSC category?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": "$normalized_unspsc",
            "prices": {
              "$push": "$total_price"
            }
          }
        },
        {
          "$addFields": {
            "price_stats": {
              "$let": {
                "vars": {
                  "prices": "$prices"
                },
                "in": {
                  "count": {
                    "$size": "$$prices"
                  },
                  "min": {
                    "$min": "$$prices"
                  },
                  "max": {
                    "$max": "$$prices"
                  },
                  "sum": {
                    "$sum": "$$prices"
                  },
                  "avg": {
                    "$avg": "$$prices"
                  }
                }
              }
            }
          }
        },
        {
          "$project": {
            "_id": 1,
            "price_stats": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148320, 39), 'signature': {'hash': b'\\x13G\\xb8fVv\\xe1\\xc6X`\\x81K\\xe2\\xf6%3\\xe8\\xd2O\\x95', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148320, 39)}"
  },
  {
    "line_number": 17,
    "question": "For departments with high Supplier Code diversity, what is the average time between repeated purchases from the same supplier?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "supplier_code": "$supplier_code"
            },
            "purchase_dates": {
              "$push": "$purchase_date"
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.department_name",
            "supplier_code_count": {
              "$sum": 1
            },
            "supplier_date_diffs": {
              "$push": {
                "$let": {
                  "vars": {
                    "dates": {
                      "$slice": [
                        "$purchase_dates",
                        1,
                        {
                          "$size": "$purchase_dates"
                        }
                      ]
                    }
                  },
                  "in": {
                    "$map": {
                      "input": {
                        "$range": [
                          0,
                          {
                            "$subtract": [
                              {
                                "$size": "$$dates"
                              },
                              1
                            ]
                          }
                        ]
                      },
                      "as": "i",
                      "in": {
                        "$divide": [
                          {
                            "$subtract": [
                              {
                                "$arrayElemAt": [
                                  "$$dates",
                                  {
                                    "$add": [
                                      "$$i",
                                      1
                                    ]
                                  }
                                ]
                              },
                              {
                                "$arrayElemAt": [
                                  "$$dates",
                                  "$$i"
                                ]
                              }
                            ]
                          },
                          86400000
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "$match": {
            "supplier_code_count": {
              "$gt": 10
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "department_name": "$_id",
            "avg_days_between_repeat_purchases": {
              "$avg": {
                "$reduce": {
                  "input": "$supplier_date_diffs",
                  "initial_value": [],
                  "in": {
                    "$concatArrays": [
                      "$$value",
                      "$$this"
                    ]
                  }
                }
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $project :: caused by :: $reduce found an unknown argument: initial_value, full error: {'ok': 0.0, 'errmsg': 'Invalid $project :: caused by :: $reduce found an unknown argument: initial_value', 'code': 40076, 'codeName': 'Location40076', '$clusterTime': {'clusterTime': Timestamp(1737148330, 91), 'signature': {'hash': b'\\x9c)\\xfb\\x0cy\\x02\\x93\\x8b\\xab\\x0c_\\x08tw\\xbc1\\x82\\xdf+\\xbd', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148330, 91)}"
  },
  {
    "line_number": 18,
    "question": "How does the Unit Price variation compare between different Family Titles when filtered by Supplier Qualifications?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$match": {
            "supplier_qualifications": {
              "$exists": true
            }
          }
        },
        {
          "$group": {
            "_id": {
              "family_title": "$family_title",
              "supplier_qualifications": "$supplier_qualifications"
            },
            "unit_prices": {
              "$push": "$unit_price"
            }
          }
        },
        {
          "$addFields": {
            "unit_price_stats": {
              "$let": {
                "vars": {
                  "prices": "$unit_prices"
                },
                "in": {
                  "min": {
                    "$min": "$$prices"
                  },
                  "max": {
                    "$max": "$$prices"
                  },
                  "avg": {
                    "$avg": "$$prices"
                  }
                }
              }
            }
          }
        },
        {
          "$sort": {
            "_id.family_title": 1,
            "_id.supplier_qualifications": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148334, 74), 'signature': {'hash': b'\\xa7I\\x10\\x18\\x1d\\xcf\\xf56\\x1cI\\x0fL\\xf1\\xba\\x1f\\xdc\\xd3\\xfc\\xa6\\x07', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148334, 74)}"
  },
  {
    "line_number": 21,
    "question": "Which combinations of Department Name and Supplier Code show the most consistent Unit Price patterns over time?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "supplier_code": "$supplier_code"
            },
            "unit_prices": {
              "$push": "$unit_price"
            }
          }
        },
        {
          "$addFields": {
            "unit_price_std_dev": {
              "$stdDevPop": "$unit_prices"
            }
          }
        },
        {
          "$sort": {
            "unit_price_std_dev": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148345, 7), 'signature': {'hash': b'^2\\xc6B.l\\xe9\\x9d\\x10\\x97\\xb2\\xf9k\\xa6\\x0e\\xf1,8\\xf7}', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148345, 7)}"
  },
  {
    "line_number": 23,
    "question": "How does the monthly purchase volume vary by Commodity Title for each Department Name?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "commodity_title": "$commodity_title",
              "month": {
                "$month": "$purchase_date"
              }
            },
            "total_purchases": {
              "$sum": "$total_price"
            }
          }
        },
        {
          "$sort": {
            "_id.department_name": 1,
            "_id.commodity_title": 1,
            "_id.month": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting., full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting.', 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148351, 3), 'signature': {'hash': b'I\\xea:\\x85\\xbf\\x8a\\x85\\x91\\x9d\\xc3\\x80\\x129\\x12\\x84\\xfb\\xf0\\x08\\x0f\\xa7', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148351, 3)}"
  },
  {
    "line_number": 26,
    "question": "Which Department Name shows the highest correlation between Normalized UNSPSC and Total Price?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "normalized_unspsc": "$normalized_unspsc"
            },
            "total_price_sum": {
              "$sum": "$total_price"
            },
            "total_price_count": {
              "$sum": 1
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "department_name": "$_id.department_name",
            "normalized_unspsc": "$_id.normalized_unspsc",
            "total_price_avg": {
              "$divide": [
                "$total_price_sum",
                "$total_price_count"
              ]
            }
          }
        },
        {
          "$sort": {
            "total_price_avg": -1
          }
        },
        {
          "$group": {
            "_id": "$department_name",
            "highest_avg": {
              "$first": "$$root"
            }
          }
        },
        {
          "$replaceRoot": {
            "new_root": "$highest_avg"
          }
        },
        {
          "$sort": {
            "total_price_avg": -1
          }
        },
        {
          "$limit": 1
        }
      ]
    },
    "error": "Query execution failed: Use of undefined variable: root, full error: {'ok': 0.0, 'errmsg': 'Use of undefined variable: root', 'code': 17276, 'codeName': 'Location17276', '$clusterTime': {'clusterTime': Timestamp(1737148362, 10), 'signature': {'hash': b\"\\x1b-\\x06m\\x88\\xc3\\x13=\\xb6}nif\\x18\\x8a\\xb0\\xda'\\xc6\\x11\", 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148362, 10)}"
  },
  {
    "line_number": 28,
    "question": "How does the ratio of Unit Price to Classification Codes vary across different Supplier Qualifications?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "supplier_qualifications": "$supplier_qualifications",
              "classification_codes": "$classification_codes",
              "unit_price": "$unit_price"
            },
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$bucketAuto": {
            "group_by": "$_id.unit_price",
            "buckets": 5
          }
        },
        {
          "$unwind": "$_id.classification_codes"
        },
        {
          "$group": {
            "_id": {
              "supplier_qualifications": "$_id.supplier_qualifications",
              "classification_code": "$_id.classification_codes",
              "bucket": "$_id.bucket"
            },
            "count": {
              "$sum": "$count"
            }
          }
        },
        {
          "$sort": {
            "_id.supplier_qualifications": 1,
            "_id.classification_code": 1,
            "_id.bucket": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Unrecognized option to $bucketAuto: group_by, full error: {'ok': 0.0, 'errmsg': 'Unrecognized option to $bucketAuto: group_by', 'code': 40245, 'codeName': 'Location40245', '$clusterTime': {'clusterTime': Timestamp(1737148368, 36), 'signature': {'hash': b'\\x1a \\x05cZ?\\x08\\x9c*U\\xeb\\t\\xf3\\xa1\\xd2\\x86\\x9a\\x90\\xd1\\x99', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148368, 36)}"
  },
  {
    "line_number": 30,
    "question": "Compare the Total Price distribution between different combinations of Sub-Acquisition Type and Sub-Acquisition Method.",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "sub_acquisition_type": "$sub_acquisition_type",
              "sub_acquisition_method": "$sub_acquisition_method"
            },
            "total_prices": {
              "$push": "$total_price"
            }
          }
        },
        {
          "$addFields": {
            "price_stats": {
              "$let": {
                "vars": {
                  "prices": "$total_prices"
                },
                "in": {
                  "count": {
                    "$size": "$$prices"
                  },
                  "min": {
                    "$min": "$$prices"
                  },
                  "max": {
                    "$max": "$$prices"
                  },
                  "avg": {
                    "$avg": "$$prices"
                  }
                }
              }
            }
          }
        },
        {
          "$project": {
            "_id": 1,
            "price_stats": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148376, 14), 'signature': {'hash': b'\\xca\\x1c#b\\xa6\\xf3A\\xca\\\\P*\\xb3\\rq\\x14\\xfbiZ{\\x91', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148376, 14)}"
  },
  {
    "line_number": 31,
    "question": "Which Commodity Titles show the strongest relationship between Quantity ordered and time gaps between purchases?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$sort": {
            "commodity_title": 1,
            "purchase_date": 1
          }
        },
        {
          "$group": {
            "_id": "$commodity_title",
            "purchases": {
              "$push": {
                "quantity": "$quantity",
                "purchase_date": "$purchase_date"
              }
            }
          }
        },
        {
          "$addFields": {
            "date_diffs": {
              "$map": {
                "input": {
                  "$slice": [
                    "$purchases",
                    1,
                    {
                      "$subtract": [
                        {
                          "$size": "$purchases"
                        },
                        1
                      ]
                    }
                  ]
                },
                "as": "purchase",
                "in": {
                  "$divide": [
                    {
                      "$subtract": [
                        "$$purchase.purchase_date",
                        {
                          "$arrayElemAt": [
                            "$purchases.purchase_date",
                            {
                              "$indexOfArray": [
                                "$purchases.purchase_date",
                                "$$purchase.purchase_date"
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    86400000
                  ]
                }
              }
            }
          }
        },
        {
          "$addFields": {
            "quantity_diffs": {
              "$map": {
                "input": {
                  "$slice": [
                    "$purchases",
                    1,
                    {
                      "$subtract": [
                        {
                          "$size": "$purchases"
                        },
                        1
                      ]
                    }
                  ]
                },
                "as": "purchase",
                "in": {
                  "$subtract": [
                    "$$purchase.quantity",
                    {
                      "$arrayElemAt": [
                        "$purchases.quantity",
                        {
                          "$indexOfArray": [
                            "$purchases.quantity",
                            "$$purchase.quantity"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "$addFields": {
            "corr": {
              "$let": {
                "vars": {
                  "mean_dates": {
                    "$avg": "$date_diffs"
                  },
                  "mean_quantities": {
                    "$avg": "$quantity_diffs"
                  }
                },
                "in": {
                  "$divide": [
                    {
                      "$sum": {
                        "$map": {
                          "input": {
                            "$zip": {
                              "use_longest_length": true,
                              "values": [
                                "$date_diffs",
                                "$quantity_diffs"
                              ]
                            }
                          },
                          "as": "pair",
                          "in": {
                            "$multiply": [
                              {
                                "$subtract": [
                                  {
                                    "$arrayElemAt": [
                                      "$$pair",
                                      0
                                    ]
                                  },
                                  "$$mean_dates"
                                ]
                              },
                              {
                                "$subtract": [
                                  {
                                    "$arrayElemAt": [
                                      "$$pair",
                                      1
                                    ]
                                  },
                                  "$$mean_quantities"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "$multiply": [
                        {
                          "$sqrt": {
                            "$sum": {
                              "$map": {
                                "input": "$date_diffs",
                                "as": "date",
                                "in": {
                                  "$pow": [
                                    {
                                      "$subtract": [
                                        "$$date",
                                        "$$mean_dates"
                                      ]
                                    },
                                    2
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "$sqrt": {
                            "$sum": {
                              "$map": {
                                "input": "$quantity_diffs",
                                "as": "qty",
                                "in": {
                                  "$pow": [
                                    {
                                      "$subtract": [
                                        "$$qty",
                                        "$$mean_quantities"
                                      ]
                                    },
                                    2
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "$sort": {
            "corr": -1
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $addFields :: caused by :: $zip found an unknown argument: use_longest_length, full error: {'ok': 0.0, 'errmsg': 'Invalid $addFields :: caused by :: $zip found an unknown argument: use_longest_length', 'code': 34464, 'codeName': 'Location34464', '$clusterTime': {'clusterTime': Timestamp(1737148386, 3), 'signature': {'hash': b'\\x0f\\xeemz\\x8f\\x90\\r\\x91\\x9b\\xc4\\xbb\\x9a)\\x1d(P0\\x83\\xea\\x92', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148386, 3)}"
  },
  {
    "line_number": 34,
    "question": "Compare the Unit Price stability between suppliers with single vs multiple Supplier Qualifications.",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "num_qualifications": {
              "$size": "$supplier_qualifications"
            }
          }
        },
        {
          "$bucket": {
            "group_by": "$num_qualifications",
            "boundaries": [
              0,
              1,
              2
            ],
            "default": "Multiple",
            "output": {
              "qualification_group": {
                "$switch": {
                  "branches": [
                    {
                      "case": {
                        "$eq": [
                          "$numQualifications",
                          1
                        ]
                      },
                      "then": "Single"
                    }
                  ],
                  "default": "Multiple"
                }
              },
              "unit_prices": {
                "$push": "$unit_price"
              }
            }
          }
        },
        {
          "$addFields": {
            "unit_price_stats": {
              "$let": {
                "vars": {
                  "prices": "$unit_prices"
                },
                "in": {
                  "min": {
                    "$min": "$$prices"
                  },
                  "max": {
                    "$max": "$$prices"
                  },
                  "avg": {
                    "$avg": "$$prices"
                  }
                }
              }
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "qualification_group": 1,
            "unit_price_stats": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Unrecognized option to $bucket: group_by., full error: {'ok': 0.0, 'errmsg': 'Unrecognized option to $bucket: group_by.', 'code': 40197, 'codeName': 'Location40197', '$clusterTime': {'clusterTime': Timestamp(1737148397, 63), 'signature': {'hash': b'\\x18\\x8c,o U\\x1d\\x96Y\\xe6}M\\xe6\\\\U\\x11\\xd4\\x1em$', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148397, 63)}"
  },
  {
    "line_number": 35,
    "question": "What is the relationship between Classification Codes and purchase frequency within each Department Name?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$unwind": "$classification_codes"
        },
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "classification_code": "$classification_codes"
            },
            "purchase_count": {
              "$sum": 1
            }
          }
        },
        {
          "$sort": {
            "_id.department_name": 1,
            "purchase_count": -1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting., full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting.', 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148400, 66), 'signature': {'hash': b'%ilw\\xeeU}\\x0e\\xcb\\x8b\\xef,\\xfb\\xf0\\x119\\x19\\xcf\\xe8.', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148400, 66)}"
  },
  {
    "line_number": 40,
    "question": "Find all Item Names where the Unit Price varied by more than 20% for the same Supplier Code",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "supplier_code": "$supplier_code",
              "item_name": "$item_name"
            },
            "prices": {
              "$push": "$unit_price"
            }
          }
        },
        {
          "$addFields": {
            "min_price": {
              "$min": "$prices"
            },
            "max_price": {
              "$max": "$prices"
            }
          }
        },
        {
          "$addFields": {
            "price_range": {
              "$subtract": [
                "$max_price",
                "$min_price"
              ]
            }
          }
        },
        {
          "$addFields": {
            "price_variation": {
              "$cond": [
                {
                  "$eq": [
                    "$min_price",
                    0
                  ]
                },
                0,
                {
                  "$multiply": [
                    {
                      "$divide": [
                        "$price_range",
                        "$min_price"
                      ]
                    },
                    100
                  ]
                }
              ]
            }
          }
        },
        {
          "$match": {
            "price_variation": {
              "$gt": 20
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "supplier_code": "$_id.supplier_code",
            "item_name": "$_id.item_name"
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148416, 10), 'signature': {'hash': b'}\\x0b;r\\x90w\\x7f4\\xf2\\xf2\\x9c\\x9b#\\xd8\\xa6\\xbc\\xb6\\xe6\\xd3:', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148416, 10)}"
  },
  {
    "line_number": 41,
    "question": "Show the count of Purchase Order Numbers by Department Name where Creation Date and Purchase Date differ by more than 7 days",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "date_diff": {
              "$dateDiff": {
                "start_date": "$creation_date",
                "end_date": "$purchase_date",
                "unit": "day"
              }
            }
          }
        },
        {
          "$match": {
            "date_diff": {
              "$gt": 7
            }
          }
        },
        {
          "$group": {
            "_id": {
              "department_name": "$department_name"
            },
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$group": {
            "_id": null,
            "counts": {
              "$push": {
                "department_name": "$_id.department_name",
                "count": "$count"
              }
            }
          }
        },
        {
          "$unwind": "$counts"
        },
        {
          "$sort": {
            "counts.department_name": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $addFields :: caused by :: Unrecognized argument to $dateDiff: start_date, full error: {'ok': 0.0, 'errmsg': 'Invalid $addFields :: caused by :: Unrecognized argument to $dateDiff: start_date', 'code': 5166302, 'codeName': 'Location5166302', '$clusterTime': {'clusterTime': Timestamp(1737148419, 27), 'signature': {'hash': b'R\\xaf\\xf8\\xeb\\x15\\xe8T\\xc0\\xa1\\nF\\x8d\\xa4\\n{\\xce\\xdca\\xc2\\x16', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148419, 27)}"
  },
  {
    "line_number": 42,
    "question": "What is the average Total Price for each Commodity Title in Q2 2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 54,
    "question": "What is the average time between orders for each Item Name ordered more than 10 times?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$match": {
            "quantity": {
              "$gt": 10
            }
          }
        },
        {
          "$group": {
            "_id": "$item_name",
            "order_dates": {
              "$push": "$purchase_date"
            }
          }
        },
        {
          "$project": {
            "_id": 1,
            "avg_days_between_orders": {
              "$avg": {
                "$map": {
                  "input": {
                    "$slice": [
                      {
                        "$sortArray": {
                          "input": "$order_dates",
                          "sort_by": 1
                        }
                      },
                      1,
                      -1
                    ]
                  },
                  "as": "date",
                  "in": {
                    "$divide": [
                      {
                        "$subtract": [
                          {
                            "$arrayElemAt": [
                              "$order_dates",
                              {
                                "$indexOfArray": [
                                  "$order_dates",
                                  "$$date"
                                ]
                              }
                            ]
                          },
                          {
                            "$arrayElemAt": [
                              "$order_dates",
                              {
                                "$indexOfArray": [
                                  "$order_dates",
                                  "$$date"
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      86400000
                    ]
                  }
                }
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $project :: caused by :: $sortArray found an unknown argument: sort_by, full error: {'ok': 0.0, 'errmsg': 'Invalid $project :: caused by :: $sortArray found an unknown argument: sort_by', 'code': 2942501, 'codeName': 'Location2942501', '$clusterTime': {'clusterTime': Timestamp(1737148457, 14), 'signature': {'hash': b'\\xdc\\xc3\\xb3\\x8ep\\xb905j\\x9c%\\x8aT`\\xfaC\\x10\\xc6xL', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148457, 14)}"
  },
  {
    "line_number": 56,
    "question": "Find all purchases where the same Item Name was ordered at different Unit Prices by the same Department Name within 30 days",
    "error": "Error processing question: Error generating query: Expecting ',' delimiter: line 40 column 30 (char 849)"
  },
  {
    "line_number": 59,
    "question": "What is the daily purchase volume for items where Segment Title contains 'Technology' in March 2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 63,
    "question": "Show all purchases where the Unit Price is 50% higher than the average Unit Price for that Item Name",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": "$item_name",
            "avg_unit_price": {
              "$avg": "$unit_price"
            }
          }
        },
        {
          "$replaceRoot": {
            "new_root": {
              "$mergeObjects": [
                {
                  "avg_unit_price": "$avg_unit_price"
                },
                "$$ROOT"
              ]
            }
          }
        },
        {
          "$match": {
            "unit_price": {
              "$gt": [
                "$avg_unit_price",
                1.5
              ]
            }
          }
        }
      ]
    },
    "error": "Query execution failed: BSON field '$replaceRoot.new_root' is an unknown field., full error: {'ok': 0.0, 'errmsg': \"BSON field '$replaceRoot.new_root' is an unknown field.\", 'code': 40415, 'codeName': 'IDLUnknownField', '$clusterTime': {'clusterTime': Timestamp(1737148486, 9), 'signature': {'hash': b'\\xd3S\\xfdA\\xb6\\r\\x15\\x88\\xc9\\x9f\\x83L,+T\\x85\\xde\\x06\\xc9\\t', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148486, 9)}"
  },
  {
    "line_number": 67,
    "question": "List all cases where the same Supplier Code provided the same Item Name at different Unit Prices to different Department Names",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "supplier_code": "$supplier_code",
              "item_name": "$item_name"
            },
            "unit_prices": {
              "$push": {
                "unit_price": "$unit_price",
                "department_name": "$department_name"
              }
            }
          }
        },
        {
          "$match": {
            "unit_prices.unit_price": {
              "$isoDifferent": true
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "supplier_code": "$_id.supplier_code",
            "item_name": "$_id.item_name",
            "unit_prices": 1
          }
        }
      ]
    },
    "error": "Query execution failed: unknown operator: $isoDifferent, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $isoDifferent', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737148498, 3), 'signature': {'hash': b'24\\x92\\xdd\\x8d\\x93E\\x17S\\xf5\\xbe\\xcb\\xc7\\xddB\\x03\\xd7\\xbf\\x7f\\x8a', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148498, 3)}"
  },
  {
    "line_number": 68,
    "question": "What is the distribution of Total Price for each Normalized UNSPSC code in Q1 2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 70,
    "question": "Find Item Names that were purchased at least once by every Department Name in the database",
    "error": "Error processing question: Error generating query: Expecting value: line 24 column 25 (char 424)"
  },
  {
    "line_number": 72,
    "question": "Show all purchases where the Creation Date is in FY 2013-2014 but the Purchase Date is in FY 2014-2015",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 76,
    "question": "How many Purchase Order Numbers were created between January 1, 2014 and January 31, 2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 77,
    "question": "What was the total spending (sum of Total Price) in Q3 of fiscal year 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 8 column 19 (char 144)"
  },
  {
    "line_number": 78,
    "question": "Which Item Names were ordered more than 10 times in December 2013?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 79,
    "question": "Show the daily order count (distinct Purchase Order Numbers) for March 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 81,
    "question": "List the top 20 most frequently purchased Item Names in Q2 2014 with their order counts",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 83,
    "question": "Which day of the week had the highest average number of orders in 2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 87,
    "question": "Which quarter had the highest number of unique Supplier Codes used?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "year": {
                "$year": "$creation_date"
              },
              "quarter": {
                "$quarter": "$creation_date"
              },
              "supplier_code": "$supplier_code"
            }
          }
        },
        {
          "$group": {
            "_id": {
              "year": "$_id.year",
              "quarter": "$_id.quarter"
            },
            "unique_suppliers": {
              "$sum": 1
            }
          }
        },
        {
          "$sort": {
            "unique_suppliers": -1
          }
        },
        {
          "$limit": 1
        }
      ]
    },
    "error": "Query execution failed: Unrecognized expression '$quarter', full error: {'ok': 0.0, 'errmsg': \"Unrecognized expression '$quarter'\", 'code': 168, 'codeName': 'InvalidPipelineOperator', '$clusterTime': {'clusterTime': Timestamp(1737148556, 24), 'signature': {'hash': b'\\xd8\\xe9\\x94+#P\\xcc\\x0c\\x12S\\xfa\\x0f8\\xc5\\xda\\x8c\\xf1&\\xbc\\xa0', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148556, 24)}"
  },
  {
    "line_number": 89,
    "question": "What is the daily average Total Price for orders in each month of 2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 91,
    "question": "Which Department Name had the highest number of repeat orders (same Item Name) in Q1 2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 92,
    "question": "What is the average time between consecutive orders for each frequently ordered Item Name (>20 orders)?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": "$item_name",
            "order_dates": {
              "$push": "$purchase_date"
            },
            "order_count": {
              "$sum": 1
            }
          }
        },
        {
          "$match": {
            "order_count": {
              "$gt": 20
            }
          }
        },
        {
          "$project": {
            "item_name": "$_id",
            "order_count": 1,
            "order_dates": 1,
            "avg_days_between_orders": {
              "$avg": {
                "$map": {
                  "input": {
                    "$slice": [
                      {
                        "$zip": {
                          "inputs": [
                            "$order_dates",
                            {
                              "$range": [
                                0,
                                {
                                  "$size": "$order_dates"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      1,
                      {
                        "$subtract": [
                          {
                            "$size": "$order_dates"
                          },
                          1
                        ]
                      }
                    ]
                  },
                  "as": "pair",
                  "in": {
                    "$divide": [
                      {
                        "$subtract": [
                          {
                            "$arrayElemAt": [
                              "$$pair",
                              1
                            ]
                          },
                          {
                            "$arrayElemAt": [
                              "$$pair",
                              0
                            ]
                          }
                        ]
                      },
                      86400000
                    ]
                  }
                }
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148575, 18), 'signature': {'hash': b'8\\xdc\\xb7\\xf7\\xcb\\x91\\xde\\xc9\\x83T\\x07\\xf5\\x95\\xf2\\x9bH\\xe54Mk', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148575, 18)}"
  },
  {
    "line_number": 98,
    "question": "Which Supplier Names received orders in every month of FY 2013-2014?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$match": {
            "fiscal_year": "2013-2014"
          }
        },
        {
          "$group": {
            "_id": {
              "supplier_name": "$supplier_name",
              "month": {
                "$month": "$purchase_date"
              }
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.supplier_name",
            "months": {
              "$addToSet": "$_id.month"
            }
          }
        },
        {
          "$match": {
            "months": {
              "$setIsSubset": [
                [
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12
                ]
              ]
            }
          }
        }
      ]
    },
    "error": "Query execution failed: unknown operator: $setIsSubset, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $setIsSubset', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737148594, 20), 'signature': {'hash': b'\\xe5\\xef`,\\x87O\\x1fj\\xf3u\\x07\\x0e\\xcd\\xe9\\xd3g9s\\xe0\\xc9', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148594, 20)}"
  },
  {
    "line_number": 99,
    "question": "What's the distribution of order sizes (count of different Item Names per Purchase Order Number)?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "purchase_order_number": "$purchase_order_number",
              "item_name": "$item_name"
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.purchase_order_number",
            "item_count": {
              "$sum": 1
            },
            "items": {
              "$push": "$_id.item_name"
            }
          }
        },
        {
          "$sort": {
            "item_count": -1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148597, 11), 'signature': {'hash': b'\\xd4g\\x96\\x8f\\x18\\xb6\\xa7\\xa8\\xf4`\\xbc\\xb0\"Q\\x85\\xbbj_\\xbab', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148597, 11)}"
  },
  {
    "line_number": 101,
    "question": "List Item Names where the total Quantity ordered in Q4 was 50% higher than Q3",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "quarter": {
              "$cond": {
                "if": {
                  "$gte": [
                    {
                      "$month": "$purchase_date"
                    },
                    10
                  ]
                },
                "then": 4,
                "else": {
                  "$cond": {
                    "if": {
                      "$gte": [
                        {
                          "$month": "$purchase_date"
                        },
                        7
                      ]
                    },
                    "then": 3,
                    "else": {
                      "$cond": {
                        "if": {
                          "$gte": [
                            {
                              "$month": "$purchase_date"
                            },
                            4
                          ]
                        },
                        "then": 2,
                        "else": 1
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "quarter": "$quarter"
            },
            "total_quantity": {
              "$sum": "$quantity"
            }
          }
        },
        {
          "$sort": {
            "_id.item_name": 1,
            "_id.quarter": 1
          }
        },
        {
          "$group": {
            "_id": "$_id.item_name",
            "q3_total": {
              "$first": {
                "$cond": [
                  {
                    "$eq": [
                      "$_id.quarter",
                      3
                    ]
                  },
                  "$total_quantity",
                  0
                ]
              }
            },
            "q4_total": {
              "$first": {
                "$cond": [
                  {
                    "$eq": [
                      "$_id.quarter",
                      4
                    ]
                  },
                  "$total_quantity",
                  0
                ]
              }
            }
          }
        },
        {
          "$match": {
            "q4_total": {
              "$gt": {
                "$multiply": [
                  "$q3_total",
                  1.5
                ]
              }
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "item_name": "$_id",
            "q3_total": 1,
            "q4_total": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting., full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting.', 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148608, 6), 'signature': {'hash': b'\\xc6\\xf1<\\xd5\\x91\\xaf\\xf4\\xd8I\\xcaLv^\\x07\\xc0T\\x0c1\\xaf\\x8d', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148608, 6)}"
  },
  {
    "line_number": 107,
    "question": "Show Item Names that were ordered in consecutive months throughout 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 110,
    "question": "Show the pattern of order volumes on days before and after holidays",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "is_holiday": {
              "$cond": [
                {
                  "$in": [
                    {
                      "$dayOfWeek": "$purchase_date"
                    },
                    [
                      1,
                      7
                    ]
                  ]
                },
                true,
                false
              ]
            }
          }
        },
        {
          "$addFields": {
            "days_from_holiday": {
              "$cond": [
                "$isHoliday",
                0,
                {
                  "$let": {
                    "vars": {
                      "next_holiday": {
                        "$min": [
                          {
                            "$dayOfWeek": {
                              "$add": [
                                "$purchase_date",
                                86400000
                              ]
                            }
                          },
                          {
                            "$dayOfWeek": {
                              "$add": [
                                "$purchase_date",
                                -86400000
                              ]
                            }
                          }
                        ]
                      }
                    },
                    "in": {
                      "$cond": [
                        {
                          "$eq": [
                            "$$nextHoliday",
                            1
                          ]
                        },
                        {
                          "$dayOfWeek": {
                            "$add": [
                              "$purchase_date",
                              86400000
                            ]
                          }
                        },
                        {
                          "$multiply": [
                            -1,
                            {
                              "$dayOfWeek": {
                                "$add": [
                                  "$purchase_date",
                                  -86400000
                                ]
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "$group": {
            "_id": "$days_from_holiday",
            "order_count": {
              "$sum": 1
            }
          }
        },
        {
          "$sort": {
            "_id": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $addFields :: caused by :: Use of undefined variable: nextHoliday, full error: {'ok': 0.0, 'errmsg': 'Invalid $addFields :: caused by :: Use of undefined variable: nextHoliday', 'code': 17276, 'codeName': 'Location17276', '$clusterTime': {'clusterTime': Timestamp(1737148645, 1), 'signature': {'hash': b'\\xd3\\x96\\xe7\\xdd\\x8d\\xeb\\xed\\\\\\x0eaQ\\x96\\x0e@G\\x19\\x1fcG\\xc2', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148645, 1)}"
  },
  {
    "line_number": 112,
    "question": "What's the distribution of time gaps between consecutive orders from the same Supplier Name?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$sort": {
            "supplier_name": 1,
            "purchase_date": 1
          }
        },
        {
          "$group": {
            "_id": "$supplier_name",
            "order_dates": {
              "$push": "$purchase_date"
            }
          }
        },
        {
          "$project": {
            "supplier_name": "$_id",
            "time_gaps": {
              "$map": {
                "input": {
                  "$range": [
                    1,
                    {
                      "$size": "$order_dates"
                    }
                  ]
                },
                "as": "idx",
                "in": {
                  "$divide": [
                    {
                      "$subtract": [
                        {
                          "$arrayElemAt": [
                            "$order_dates",
                            {
                              "$subtract": [
                                "$$idx",
                                1
                              ]
                            }
                          ]
                        },
                        {
                          "$arrayElemAt": [
                            "$order_dates",
                            {
                              "$subtract": [
                                "$$idx",
                                2
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    86400000
                  ]
                }
              }
            }
          }
        },
        {
          "$unwind": "$time_gaps"
        },
        {
          "$bucketAuto": {
            "group_by": "$time_gaps",
            "buckets": 5
          }
        }
      ]
    },
    "error": "Query execution failed: Unrecognized option to $bucketAuto: group_by, full error: {'ok': 0.0, 'errmsg': 'Unrecognized option to $bucketAuto: group_by', 'code': 40245, 'codeName': 'Location40245', '$clusterTime': {'clusterTime': Timestamp(1737148653, 43), 'signature': {'hash': b'!f_\\xe0\\x91\\xffp)f\\xcf\\xbf\\xf5;\\xba\\x10\\x1fv\\x1c-{', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148653, 43)}"
  },
  {
    "line_number": 116,
    "question": "Show all Item Names where the Unit Price increased by more than 15% between consecutive orders",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$sort": {
            "purchase_date": 1,
            "item_name": 1
          }
        },
        {
          "$group": {
            "_id": {
              "item_name": "$item_name"
            },
            "purchases": {
              "$push": {
                "purchase_date": "$purchase_date",
                "unit_price": "$unit_price"
              }
            }
          }
        },
        {
          "$unwind": "$purchases"
        },
        {
          "$sort": {
            "purchases.purchase_date": 1
          }
        },
        {
          "$group": {
            "_id": {
              "item_name": "$_id.item_name"
            },
            "purchases": {
              "$push": "$purchases"
            }
          }
        },
        {
          "$unwind": "$purchases"
        },
        {
          "$unwind": "$purchases"
        },
        {
          "$sort": {
            "purchases.purchase_date": 1
          }
        },
        {
          "$group": {
            "_id": {
              "item_name": "$_id.item_name"
            },
            "purchases": {
              "$push": "$purchases"
            },
            "price_increases": {
              "$push": {
                "$cond": [
                  {
                    "$and": [
                      {
                        "$gt": [
                          "$purchases.unit_price",
                          {
                            "$multiply": [
                              {
                                "$arrayElemAt": [
                                  "$purchases.unit_price",
                                  {
                                    "$subtract": [
                                      {
                                        "$indexOfArray": [
                                          "$purchases.unit_price",
                                          "$purchases.unit_price"
                                        ]
                                      },
                                      1
                                    ]
                                  }
                                ]
                              },
                              1.15
                            ]
                          }
                        ]
                      },
                      {
                        "$gt": [
                          {
                            "$indexOfArray": [
                              "$purchases.unit_price",
                              "$purchases.unit_price"
                            ]
                          },
                          0
                        ]
                      }
                    ]
                  },
                  "$purchases",
                  null
                ]
              }
            }
          }
        },
        {
          "$match": {
            "price_increases": {
              "$ne": []
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "item_name": "$_id.item_name",
            "price_increases": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148672, 20), 'signature': {'hash': b'~z\\x0e\\x05\\xdf\\x15\\xcc\\x83\\x88\\xf6/\\xfe&\\xb3 \\xd2\\x8b\\xc4c\\x10', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148672, 20)}"
  },
  {
    "line_number": 117,
    "question": "What's the median order value (Total Price) by hour of day for each Department Name?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "hour_of_day": {
              "$hour": "$purchase_date"
            }
          }
        },
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "hour_of_day": "$hour_of_day"
            },
            "order_values": {
              "$push": "$total_price"
            }
          }
        },
        {
          "$addFields": {
            "order_values": {
              "$sortArray": {
                "input": "$order_values",
                "sort_order": 1
              }
            }
          }
        },
        {
          "$addFields": {
            "median_order_value": {
              "$arrayElemAt": [
                "$orderValues",
                {
                  "$floor": {
                    "$divide": [
                      {
                        "$size": "$order_values"
                      },
                      2
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.department_name",
            "median_order_values": {
              "$push": {
                "hour_of_day": "$_id.hour_of_day",
                "median_order_value": "$median_order_value"
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $addFields :: caused by :: $sortArray found an unknown argument: sort_order, full error: {'ok': 0.0, 'errmsg': 'Invalid $addFields :: caused by :: $sortArray found an unknown argument: sort_order', 'code': 2942501, 'codeName': 'Location2942501', '$clusterTime': {'clusterTime': Timestamp(1737148676, 27), 'signature': {'hash': b'\\xa5\\xdd\\x9f\\xd2\\xff\\xf3\\x90~\\x99\\xc3\\xeb&7\\xfc\\xf9x\\xebO\\xaf\\xda', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148676, 27)}"
  },
  {
    "line_number": 119,
    "question": "Show the correlation between order size (number of Item Names) and processing time (days between Creation Date and Purchase Date)",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$project": {
            "order_size": {
              "$size": {
                "$split": [
                  "$item_name",
                  ","
                ]
              }
            },
            "processing_time": {
              "$divide": [
                {
                  "$subtract": [
                    "$purchase_date",
                    "$creation_date"
                  ]
                },
                86400000
              ]
            }
          }
        },
        {
          "$group": {
            "_id": "$order_size",
            "avg_processing_time": {
              "$avg": "$processing_time"
            }
          }
        },
        {
          "$sort": {
            "_id": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: $split requires an expression that evaluates to a string as a first argument, found: double, full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: $split requires an expression that evaluates to a string as a first argument, found: double', 'code': 40085, 'codeName': 'Location40085', '$clusterTime': {'clusterTime': Timestamp(1737148685, 34), 'signature': {'hash': b'\\x1c\\xb6\\xd7\\x0b)J\\xcc\\x1c\"\\xb7\\xef\\xd3\\xf3xV\\xb8\\xe4\\x93Z\\x8c', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148685, 34)}"
  },
  {
    "line_number": 121,
    "question": "List Purchase Order Numbers where the Total Price exceeds twice the department's monthly average",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "purchase_order_number": "$purchase_order_number"
            },
            "total_price": {
              "$sum": "$total_price"
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.department_name",
            "monthly_avg": {
              "$avg": "$total_price"
            },
            "purchase_orders": {
              "$push": {
                "purchase_order_number": "$_id.purchase_order_number",
                "total_price": "$total_price"
              }
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "department_name": "$_id",
            "monthly_avg": 1,
            "purchase_orders": {
              "$filter": {
                "input": "$purchase_orders",
                "cond": {
                  "$gt": [
                    "$$this.total_price",
                    {
                      "$multiply": [
                        "$monthly_avg",
                        2
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "$unwind": "$purchase_orders"
        },
        {
          "$replaceRoot": {
            "new_root": "$purchase_orders"
          }
        }
      ]
    },
    "error": "Query execution failed: BSON field '$replaceRoot.new_root' is an unknown field., full error: {'ok': 0.0, 'errmsg': \"BSON field '$replaceRoot.new_root' is an unknown field.\", 'code': 40415, 'codeName': 'IDLUnknownField', '$clusterTime': {'clusterTime': Timestamp(1737148694, 5), 'signature': {'hash': b'u\\xeb8[u\\xe8Q%\\n\\xae\\x02\\x80\\x12p<\\xb1\\xa8K\\xd0\\xfe', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148694, 5)}"
  },
  {
    "line_number": 122,
    "question": "What's the distribution of Quantity ordered by day of month for frequently purchased items?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$unwind": "$quantity"
        },
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "day": {
                "$dayOfMonth": "$purchase_date"
              }
            },
            "total_quantity": {
              "$sum": "$quantity"
            }
          }
        },
        {
          "$sort": {
            "total_quantity": -1
          }
        },
        {
          "$group": {
            "_id": "$_id.item_name",
            "quantity_by_day": {
              "$push": {
                "day": "$_id.day",
                "total_quantity": "$total_quantity"
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting., full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting.', 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148697, 23), 'signature': {'hash': b\"\\xb4{\\x8d(e\\xaeC\\xd9\\xf7\\xf8\\xf1d'\\xdeo\\x9b0\\xf3\\xbdT\", 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148697, 23)}"
  },
  {
    "line_number": 123,
    "question": "Show departments that placed more than 30% of their monthly orders on the last day",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "month": {
              "$dateToString": {
                "format": "%Y-%m",
                "date": "$purchase_date"
              }
            }
          }
        },
        {
          "$addFields": {
            "last_day": {
              "$let": {
                "vars": {
                  "month_end": {
                    "$dateFromParts": {
                      "year": {
                        "$year": "$purchase_date"
                      },
                      "month": {
                        "$month": "$purchase_date"
                      },
                      "day": {
                        "$dayOfMonth": {
                          "date": {
                            "$dateAdd": {
                              "start_date": "$purchase_date",
                              "unit": "month",
                              "amount": 1
                            }
                          },
                          "timezone": "America/Los_Angeles"
                        }
                      }
                    }
                  }
                },
                "in": {
                  "$eq": [
                    "$purchase_date",
                    {
                      "$dateSubtract": {
                        "start_date": "$$month_end",
                        "unit": "day",
                        "amount": 1
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "$group": {
            "_id": {
              "department": "$department_name",
              "month": "$month"
            },
            "total_orders": {
              "$sum": 1
            },
            "last_day_orders": {
              "$sum": {
                "$cond": [
                  "$last_day",
                  1,
                  0
                ]
              }
            }
          }
        },
        {
          "$addFields": {
            "last_day_percentage": {
              "$multiply": [
                {
                  "$divide": [
                    "$last_day_orders",
                    "$total_orders"
                  ]
                },
                100
              ]
            }
          }
        },
        {
          "$match": {
            "last_day_percentage": {
              "$gt": 30
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "department": "$_id.department",
            "month": "$_id.month",
            "last_day_percentage": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $addFields :: caused by :: Unrecognized argument to $dateAdd: start_date. Expected arguments are startDate, unit, amount, and optionally timezone., full error: {'ok': 0.0, 'errmsg': 'Invalid $addFields :: caused by :: Unrecognized argument to $dateAdd: start_date. Expected arguments are startDate, unit, amount, and optionally timezone.', 'code': 5166401, 'codeName': 'Location5166401', '$clusterTime': {'clusterTime': Timestamp(1737148704, 11), 'signature': {'hash': b'!zR$N\\xce\\x1a\\x04T\\x91\\xac\\xa3\\x1e\\x02\\xa7\\x0fe\\x807\\t', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148704, 11)}"
  },
  {
    "line_number": 124,
    "question": "Which Item Names show the most consistent ordering pattern (regular intervals between Purchase Dates)?",
    "error": "Error processing question: Error generating query: Expecting ',' delimiter: line 77 column 26 (char 1922)"
  },
  {
    "line_number": 125,
    "question": "List all cases where multiple Purchase Order Numbers were created for the same Item Name on the same day",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "purchase_date": "$purchase_date"
            },
            "purchase_order_numbers": {
              "$push": "$purchase_order_number"
            }
          }
        },
        {
          "$match": {
            "purchase_order_numbers": {
              "$size": {
                "$gt": 1
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Failed to parse $size. Expected a number in: $size: { $gt: 1 }, full error: {'ok': 0.0, 'errmsg': 'Failed to parse $size. Expected a number in: $size: { $gt: 1 }', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737148712, 3), 'signature': {'hash': b\"o\\xbck\\xa7*S\\xca+\\xb8\\xa2\\xa7\\xb6\\xe5\\xecshdv'K\", 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148712, 3)}"
  },
  {
    "line_number": 128,
    "question": "Which Supplier Names have the most predictable delivery patterns (Creation Date to Purchase Date)?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": "$supplier_name",
            "delivery_times": {
              "$push": {
                "$subtract": [
                  "$purchase_date",
                  "$creation_date"
                ]
              }
            }
          }
        },
        {
          "$project": {
            "_id": 1,
            "delivery_time_variance": {
              "$stdDevPop": "$delivery_times"
            }
          }
        },
        {
          "$sort": {
            "delivery_time_variance": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148722, 12), 'signature': {'hash': b'Q\\xe7\\x056\\xb6\\x93\\xea\\x99\\xa9\\xe0\\x1e\\xe5\\xda\\x00\\xf5*\\xcb\\xc3\\xe1e', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148722, 12)}"
  },
  {
    "line_number": 129,
    "question": "List Item Names that were ordered in similar quantities (\u00c2\u00b110%) across multiple Purchase Order Numbers",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "purchase_order_number": "$purchase_order_number"
            },
            "quantity": {
              "$first": "$quantity"
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.item_name",
            "quantities": {
              "$push": "$quantity"
            },
            "purchase_order_numbers": {
              "$push": "$_id.purchase_order_number"
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "item_name": "$_id",
            "quantities": 1,
            "purchase_order_numbers": 1
          }
        },
        {
          "$match": {
            "purchase_order_numbers.1": {
              "$exists": true
            },
            "$expr": {
              "$let": {
                "vars": {
                  "min_quantity": {
                    "$min": "$quantities"
                  },
                  "max_quantity": {
                    "$max": "$quantities"
                  }
                },
                "in": {
                  "$and": [
                    {
                      "$lte": [
                        {
                          "$multiply": [
                            "$minQuantity",
                            1.1
                          ]
                        },
                        "$maxQuantity"
                      ]
                    },
                    {
                      "$gte": [
                        {
                          "$multiply": [
                            "$maxQuantity",
                            0.9
                          ]
                        },
                        "$minQuantity"
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148727, 29), 'signature': {'hash': b'\\x83\\x8c\\xaa\\x05\\xd4\\x1cZ\\x1b}R\\xfa\\xa7\\xaf\\xad@\\xf8\\xda\\xf3\\x0c\\x0c', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148727, 29)}"
  },
  {
    "line_number": 131,
    "question": "Show departments where the average time between Creation Date and Purchase Date increased month over month",
    "error": "Error processing question: Error generating query: Expecting value: line 51 column 21 (char 936)"
  },
  {
    "line_number": 132,
    "question": "Which pairs of Item Names are most frequently ordered together (same Purchase Order Number)?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$unwind": "$item_name"
        },
        {
          "$group": {
            "_id": {
              "purchase_order_number": "$purchase_order_number",
              "item_name_pair": {
                "$push": "$item_name"
              }
            }
          }
        },
        {
          "$unwind": "$_id.item_name_pair"
        },
        {
          "$group": {
            "_id": {
              "item_pair": {
                "$setIntersection": [
                  "$_id.item_name_pair",
                  "$_id.item_name_pair"
                ]
              }
            },
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$match": {
            "_id.item_pair": {
              "$size": 2
            }
          }
        },
        {
          "$sort": {
            "count": -1
          }
        }
      ]
    },
    "error": "Query execution failed: Unrecognized expression '$push', full error: {'ok': 0.0, 'errmsg': \"Unrecognized expression '$push'\", 'code': 168, 'codeName': 'InvalidPipelineOperator', '$clusterTime': {'clusterTime': Timestamp(1737148739, 12), 'signature': {'hash': b'\\xd6\\x90C9\\x8b\\x01\\xa7\\xcc\\xc8\\xb4\\xa7\\xa0\\xe0\\xb7*\\xe4\\x06\\x02cp', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148739, 12)}"
  },
  {
    "line_number": 133,
    "question": "List cases where the same Item Name was ordered multiple times within 24 hours",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$unwind": "$item_name"
        },
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "window": {
                "$subtract": [
                  {
                    "$toDate": "$purchase_date"
                  },
                  {
                    "$mod": [
                      {
                        "$toDate": "$purchase_date"
                      },
                      86400000
                    ]
                  }
                ]
              }
            },
            "purchases": {
              "$push": {
                "purchase_date": "$purchase_date",
                "purchase_order_number": "$purchase_order_number"
              }
            }
          }
        },
        {
          "$match": {
            "purchases.1": {
              "$exists": true
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "item_name": "$_id.item_name",
            "purchases": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: $mod only supports numeric types, not date and int, full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: $mod only supports numeric types, not date and int', 'code': 16611, 'codeName': 'Location16611', '$clusterTime': {'clusterTime': Timestamp(1737148742, 35), 'signature': {'hash': b'\\x15k\\xd9\\x08\\x83]\\xfc^\\x98_\\xcec\\x87\\xbf\\x9f\\xe3Q)\\x01\\xd5', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148742, 35)}"
  },
  {
    "line_number": 134,
    "question": "What's the typical order volume pattern in the days leading up to quarter-end?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "quarter": {
              "$toInt": {
                "$add": [
                  {
                    "$multiply": [
                      {
                        "$year": "$purchase_date"
                      },
                      4
                    ]
                  },
                  {
                    "$ceil": {
                      "$divide": [
                        {
                          "$month": "$purchase_date"
                        },
                        3
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "$addFields": {
            "days_to_quarter_end": {
              "$switch": {
                "branches": [
                  {
                    "case": {
                      "$eq": [
                        "$quarter",
                        1
                      ]
                    },
                    "then": {
                      "$subtract": [
                        90,
                        {
                          "$dayOfYear": "$purchase_date"
                        }
                      ]
                    }
                  },
                  {
                    "case": {
                      "$eq": [
                        "$quarter",
                        2
                      ]
                    },
                    "then": {
                      "$subtract": [
                        181,
                        {
                          "$dayOfYear": "$purchase_date"
                        }
                      ]
                    }
                  },
                  {
                    "case": {
                      "$eq": [
                        "$quarter",
                        3
                      ]
                    },
                    "then": {
                      "$subtract": [
                        273,
                        {
                          "$dayOfYear": "$purchase_date"
                        }
                      ]
                    }
                  },
                  {
                    "case": {
                      "$eq": [
                        "$quarter",
                        4
                      ]
                    },
                    "then": {
                      "$subtract": [
                        365,
                        {
                          "$dayOfYear": "$purchase_date"
                        }
                      ]
                    }
                  }
                ],
                "default": 0
              }
            }
          }
        },
        {
          "$bucket": {
            "group_by": "$days_to_quarter_end",
            "boundaries": [
              0,
              5,
              10,
              15,
              20,
              25,
              30
            ],
            "default": "Other",
            "output": {
              "count": {
                "$sum": 1
              },
              "purchases": {
                "$push": "$purchase_order_number"
              }
            }
          }
        },
        {
          "$sort": {
            "_id": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Unrecognized option to $bucket: group_by., full error: {'ok': 0.0, 'errmsg': 'Unrecognized option to $bucket: group_by.', 'code': 40197, 'codeName': 'Location40197', '$clusterTime': {'clusterTime': Timestamp(1737148750, 22), 'signature': {'hash': b'\\x91J\\x8f\\n)\\x82!<tl\\xdb7\\xaa\\xa3\\xecc\\x0f\\x10jo', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148750, 22)}"
  },
  {
    "line_number": 136,
    "question": "Count total Purchase Order Numbers by Department Name for May 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 137,
    "question": "Sum Total Price of all orders where Supplier Name is 'Dell' in Q1 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 8 column 19 (char 141)"
  },
  {
    "line_number": 139,
    "question": "Count distinct Supplier Codes used by each Department Name in March 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 142,
    "question": "Count orders by Acquisition Method for Q2 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 145,
    "question": "Count Purchase Order Numbers created each day in April 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 148,
    "question": "Show daily order count where Creation Date is in June 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 150,
    "question": "List all purchases where Purchase Date is more than 30 days after Creation Date",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "date_diff": {
              "$dateDiff": {
                "start_date": "$creation_date",
                "end_date": "$purchase_date",
                "unit": "day"
              }
            }
          }
        },
        {
          "$match": {
            "date_diff": {
              "$gt": 30
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $addFields :: caused by :: Unrecognized argument to $dateDiff: start_date, full error: {'ok': 0.0, 'errmsg': 'Invalid $addFields :: caused by :: Unrecognized argument to $dateDiff: start_date', 'code': 5166302, 'codeName': 'Location5166302', '$clusterTime': {'clusterTime': Timestamp(1737148808, 17), 'signature': {'hash': b'\\xd0\\xbcB\\xe6\\xf2\\x9a\\x02[%YfC\\\\\\x84Ymr\\xef2\\xb7', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148808, 17)}"
  },
  {
    "line_number": 151,
    "question": "Sum Total Price by Commodity Title for Q3 2013",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 153,
    "question": "Find Item Names purchased by more than 5 different Department Names",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name"
            },
            "num_departments": {
              "$addToSet": "$department_name"
            }
          }
        },
        {
          "$match": {
            "num_departments": {
              "$gt": 5
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "item_name": "$_id.item_name"
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148815, 98), 'signature': {'hash': b'(\\x1e\\xbe\\x87\\xb1o\\xbaG\\xcb\\xb5t\\xe6\\xc8\\xd3\\xcaP\\xfc\\xf1[\\xaf', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148815, 98)}"
  },
  {
    "line_number": 156,
    "question": "Find orders where Unit Price changed by more than 5% between consecutive purchases of same Item Name",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$sort": {
            "item_name": 1,
            "purchase_date": 1
          }
        },
        {
          "$group": {
            "_id": "$item_name",
            "purchases": {
              "$push": {
                "purchase_date": "$purchase_date",
                "unit_price": "$unit_price"
              }
            }
          }
        },
        {
          "$unwind": "$purchases"
        },
        {
          "$sort": {
            "_id": 1,
            "purchases.purchase_date": 1
          }
        },
        {
          "$group": {
            "_id": {
              "item_name": "$_id",
              "grp": {
                "$push": "$purchases"
              }
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "item_name": "$_id.item_name",
            "purchases": {
              "$filter": {
                "input": {
                  "$map": {
                    "input": {
                      "$slice": [
                        "$_id.grp",
                        2,
                        {
                          "$size": "$_id.grp"
                        }
                      ]
                    },
                    "as": "pair",
                    "in": {
                      "$let": {
                        "vars": {
                          "prev": {
                            "$arrayElemAt": [
                              "$$pair",
                              0
                            ]
                          },
                          "curr": {
                            "$arrayElemAt": [
                              "$$pair",
                              1
                            ]
                          }
                        },
                        "in": {
                          "$and": [
                            {
                              "$gt": [
                                {
                                  "$abs": {
                                    "$subtract": [
                                      "$curr.unit_price",
                                      "$prev.unit_price"
                                    ]
                                  }
                                },
                                {
                                  "$multiply": [
                                    0.05,
                                    "$prev.unit_price"
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "as": "flagged",
                "cond": {
                  "$eq": [
                    "$$flagged",
                    true
                  ]
                }
              }
            }
          }
        },
        {
          "$match": {
            "purchases": {
              "$not": {
                "$size": 0
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Unrecognized expression '$push', full error: {'ok': 0.0, 'errmsg': \"Unrecognized expression '$push'\", 'code': 168, 'codeName': 'InvalidPipelineOperator', '$clusterTime': {'clusterTime': Timestamp(1737148829, 86), 'signature': {'hash': b'\\xff\\xed\\x8b\\t\\xd1\\xde\\xc8\\x0e\\xd0\\x12\\x19\\xb6\\x7f]\\x85\\xb1Ie\\x9bV', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148829, 86)}"
  },
  {
    "line_number": 157,
    "question": "Count Purchase Order Numbers by hour of day in July 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 159,
    "question": "Sum Total Price by Acquisition Type for first week of each month",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "week": {
              "$isoWeekYear": {
                "date": "$creation_date",
                "iso_week_year_start_quarter": 1
              }
            }
          }
        },
        {
          "$match": {
            "week": {
              "$mod": [
                {
                  "$isoWeekYear": {
                    "date": "$creation_date",
                    "iso_week_year_start_quarter": 1
                  }
                },
                52
              ]
            }
          }
        },
        {
          "$group": {
            "_id": {
              "acquisition_type": "$acquisition_type",
              "week": "$week"
            },
            "total_price": {
              "$sum": "$total_price"
            }
          }
        },
        {
          "$sort": {
            "_id.week": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $addFields :: caused by :: unrecognized option to $isoWeekYear: \"iso_week_year_start_quarter\", full error: {'ok': 0.0, 'errmsg': 'Invalid $addFields :: caused by :: unrecognized option to $isoWeekYear: \"iso_week_year_start_quarter\"', 'code': 40535, 'codeName': 'Location40535', '$clusterTime': {'clusterTime': Timestamp(1737148838, 17), 'signature': {'hash': b\";\\x10\\xbc|')\\xc0\\x01)\\xe0\\xf5\\xbe\\xf86\\xf06X!\\xab\\xb0\", 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148838, 17)}"
  },
  {
    "line_number": 162,
    "question": "Count distinct Item Names ordered by each Department Name in Q4 2013",
    "error": "Error processing question: Error generating query: Expecting value: line 8 column 19 (char 139)"
  },
  {
    "line_number": 165,
    "question": "Count orders by Classification Codes in May 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 167,
    "question": "List total spending by Family Title in Q1 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 169,
    "question": "Show orders where Total Price is 30% above average for same Item Name",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": "$item_name",
            "avg_total_price": {
              "$avg": "$total_price"
            }
          }
        },
        {
          "$replaceRoot": {
            "new_root": {
              "$mergeObjects": [
                {
                  "item_name": "$_id",
                  "avg_total_price": "$avg_total_price"
                },
                "$$ROOT"
              ]
            }
          }
        },
        {
          "$match": {
            "total_price": {
              "$gt": {
                "$multiply": [
                  "$avg_total_price",
                  1.3
                ]
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: BSON field '$replaceRoot.new_root' is an unknown field., full error: {'ok': 0.0, 'errmsg': \"BSON field '$replaceRoot.new_root' is an unknown field.\", 'code': 40415, 'codeName': 'IDLUnknownField', '$clusterTime': {'clusterTime': Timestamp(1737148865, 85), 'signature': {'hash': b'\\xb2\\xefv\\xf6\\xce]W\\xdc\\xa8Zb\\x9f\\xe5\\xca\\xcb\\x8d0]\\x925', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148865, 85)}"
  },
  {
    "line_number": 171,
    "question": "List Item Names ordered in both Q1 and Q4 of FY 2013-2014",
    "error": "Error processing question: Error generating query: Expecting value: line 13 column 19 (char 214)"
  },
  {
    "line_number": 176,
    "question": "Find Supplier Names used by all Locations in single month",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 177,
    "question": "Show total spending by Segment Title in March 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 179,
    "question": "List Item Names with consistent monthly order Quantity (\u00c2\u00b110%)",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "month": {
                "$month": "$purchase_date"
              }
            },
            "quantities": {
              "$push": "$quantity"
            }
          }
        },
        {
          "$addFields": {
            "quantities": {
              "$slice": [
                "$quantities",
                1,
                {
                  "$size": "$quantities"
                }
              ]
            }
          }
        },
        {
          "$addFields": {
            "min_quantity": {
              "$min": "$quantities"
            },
            "max_quantity": {
              "$max": "$quantities"
            },
            "quantity_range": {
              "$subtract": [
                {
                  "$max": "$quantities"
                },
                {
                  "$min": "$quantities"
                }
              ]
            }
          }
        },
        {
          "$match": {
            "$expr": {
              "$and": [
                {
                  "$gt": [
                    {
                      "$size": "$quantities"
                    },
                    1
                  ]
                },
                {
                  "$lte": [
                    "$quantity_range",
                    {
                      "$multiply": [
                        {
                          "$avg": "$quantities"
                        },
                        0.2
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.item_name"
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148900, 30), 'signature': {'hash': b'\\xd5\\x07\\xf1\\xfc\\xfc\\x0c\\xf8\\xdc4u\\xf3\\xf9s\\x8d\\xc7\"uwv{', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148900, 30)}"
  },
  {
    "line_number": 182,
    "question": "Find purchases where Unit Price is lowest for each Item Name",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": "$item_name",
            "min_unit_price": {
              "$min": "$unit_price"
            }
          }
        },
        {
          "$replaceRoot": {
            "new_root": {
              "$mergeObjects": [
                "$_id",
                {
                  "min_unit_price": "$min_unit_price"
                }
              ]
            }
          }
        }
      ]
    },
    "error": "Query execution failed: BSON field '$replaceRoot.new_root' is an unknown field., full error: {'ok': 0.0, 'errmsg': \"BSON field '$replaceRoot.new_root' is an unknown field.\", 'code': 40415, 'codeName': 'IDLUnknownField', '$clusterTime': {'clusterTime': Timestamp(1737148907, 13), 'signature': {'hash': b\"\\xdchG\\xe7hS\\xdf\\xfe\\x9d\\xd2\\xc1'\\x18\\x8c\\r\\xafN\\xd9B\\x9d\", 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148907, 13)}"
  },
  {
    "line_number": 186,
    "question": "List all Supplier Names where average time between orders decreased each month in 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 187,
    "question": "Count Purchase Order Numbers with exactly same Item Names but different Supplier Codes",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "purchase_order_number": "$purchase_order_number"
            },
            "supplier_codes": {
              "$addToSet": "$supplier_code"
            }
          }
        },
        {
          "$match": {
            "supplier_codes": {
              "$size": {
                "$gt": 1
              }
            }
          }
        },
        {
          "$group": {
            "_id": null,
            "count": {
              "$sum": 1
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Failed to parse $size. Expected a number in: $size: { $gt: 1 }, full error: {'ok': 0.0, 'errmsg': 'Failed to parse $size. Expected a number in: $size: { $gt: 1 }', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737148931, 87), 'signature': {'hash': b'\\xb2\\x16\\x87\\xac8MU\\xd4\\xe3\\x06\\xb3T\\x92\\xd3P\\\\\\x95\\xf1)\\x94', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148931, 87)}"
  },
  {
    "line_number": 188,
    "question": "Show total spending by Segment Title where Unit Price changed mid-month",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "segment_title": "$segment_title",
              "unit_price": "$unit_price",
              "month": {
                "$month": "$purchase_date"
              }
            },
            "total_spend": {
              "$sum": "$total_price"
            }
          }
        },
        {
          "$group": {
            "_id": {
              "segment_title": "$_id.segment_title",
              "month": "$_id.month"
            },
            "unit_prices": {
              "$push": {
                "unit_price": "$_id.unit_price",
                "total_spend": "$total_spend"
              }
            }
          }
        },
        {
          "$match": {
            "unit_prices.1": {
              "$exists": true
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.segment_title",
            "total_spend": {
              "$sum": {
                "$sum": "$unit_prices.total_spend"
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148936, 19), 'signature': {'hash': b'4\\xfe\\x16\\x19$N\\xccB\\xdd\\x9d\\xb2i\\xcb\\x9dd\\xa1\\x8a\\x92t:', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148936, 19)}"
  },
  {
    "line_number": 189,
    "question": "Find departments that ordered same Item Name from at least 3 different Supplier Codes",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "item_name": "$item_name"
            },
            "supplier_codes": {
              "$addToSet": "$supplier_code"
            }
          }
        },
        {
          "$match": {
            "supplier_codes": {
              "$size": {
                "$gte": 3
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Failed to parse $size. Expected a number in: $size: { $gte: 3 }, full error: {'ok': 0.0, 'errmsg': 'Failed to parse $size. Expected a number in: $size: { $gte: 3 }', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737148938, 37), 'signature': {'hash': b'v\\xe6\\xad\\x15\\x8c\\xbb/I\\x0c;_\\xa5\\xdd|=b\\xd3\\xbe\\x11\\x8e', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148938, 37)}"
  },
  {
    "line_number": 190,
    "question": "Count orders where Total Price is exactly divisible by Quantity",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$match": {
            "total_price": {
              "$divide": [
                "$total_price",
                "$quantity"
              ]
            }
          }
        },
        {
          "$count": "orders_with_total_price_divisible_by_quantity"
        }
      ]
    },
    "error": "Query execution failed: unknown operator: $divide, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $divide', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737148940, 33), 'signature': {'hash': b'\\xa1\\x8e\\xa5;\\x1c38\\xa1\\xf6e\\xda\\x84b\\xf5\\x04\\x8e\\xd2\\xae<r', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148940, 33)}"
  },
  {
    "line_number": 193,
    "question": "Count orders where Unit Price is above department's average for that Item Name",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "item_name": "$item_name"
            },
            "avg_unit_price": {
              "$avg": "$unit_price"
            },
            "orders": {
              "$push": "$$root"
            }
          }
        },
        {
          "$unwind": "$orders"
        },
        {
          "$match": {
            "orders.unit_price": {
              "$gt": "$avg_unit_price"
            }
          }
        },
        {
          "$group": {
            "_id": {
              "department_name": "$_id.department_name",
              "item_name": "$_id.item_name"
            },
            "count": {
              "$sum": 1
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Use of undefined variable: root, full error: {'ok': 0.0, 'errmsg': 'Use of undefined variable: root', 'code': 17276, 'codeName': 'Location17276', '$clusterTime': {'clusterTime': Timestamp(1737148952, 16), 'signature': {'hash': b'\\xc5\\x910\\x03\\\\\\x15\\xfa\\x8a2\\xbdt\\x1dPD\\xec7^\\xe0\\xee\\xa4', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148952, 16)}"
  },
  {
    "line_number": 197,
    "question": "Count orders where Total Price matches exactly across different Department Names",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "total_price": "$total_price"
            },
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.total_price",
            "orders": {
              "$push": {
                "department_name": "$_id.department_name",
                "count": "$count"
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148968, 21), 'signature': {'hash': b'\\xca*\\x01W\\x19\\x85,\\xa3\\x1eT96?h\\x95\\xfb2\\xfb9\\xf5', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148968, 21)}"
  },
  {
    "line_number": 198,
    "question": "Find Item Names with most consistent Unit Price across all Locations",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "unit_price": "$unit_price"
            },
            "locations": {
              "$addToSet": "$location"
            }
          }
        },
        {
          "$project": {
            "item_name": "$_id.item_name",
            "unit_price": "$_id.unit_price",
            "num_locations": {
              "$size": "$locations"
            }
          }
        },
        {
          "$sort": {
            "num_locations": -1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting., full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting.', 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148972, 3), 'signature': {'hash': b'\\xbb\\x16\\xfe^6\\xf8\\xf4\\xbe\\x9c\\xfdx\\x10\\xc9\\xc6\\xbd\\xbb\\x10u\\xa0\\xdc', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148972, 3)}"
  },
  {
    "line_number": 203,
    "question": "Find cases where same Item Name has different Classification Codes",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name"
            },
            "classification_codes": {
              "$addToSet": "$classification_codes"
            }
          }
        },
        {
          "$match": {
            "classification_codes.1": {
              "$exists": true
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737148989, 19), 'signature': {'hash': b\"\\x97f\\xd8\\xeb'0\\xca\\x13\\xe3%v3\\x84\\xe04M\\xd6x\\n,\", 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148989, 19)}"
  },
  {
    "line_number": 204,
    "question": "Count orders by Sub-Acquisition Method where LPA Number format changed",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "sub_acquisition_method": "$sub_acquisition_method",
              "lpa_number_format_changed": {
                "$cond": [
                  {
                    "$regexMatch": {
                      "input": "$lpa_number",
                      "regex": "/^\\d{4}-\\d{2}-\\d{2}-\\d{4}$/"
                    }
                  },
                  "New Format",
                  "Old Format"
                ]
              }
            },
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$sort": {
            "_id.sub_acquisition_method": 1,
            "_id.lpa_number_format_changed": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: $regexMatch: input must be of type string, full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: $regexMatch: input must be of type string', 'code': 5073401, 'codeName': 'Location5073401', '$clusterTime': {'clusterTime': Timestamp(1737148992, 19), 'signature': {'hash': b'\\x1b/\\\\&m+\\xd7\\xf1\\xf1U\\x16\\x00\\xdf\\xf7\\x11\\xa9\\rJ[o', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737148992, 19)}"
  },
  {
    "line_number": 207,
    "question": "Find Purchase Order Numbers with items from every Segment Title",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$unwind": "$classification_codes"
        },
        {
          "$group": {
            "_id": {
              "purchase_order_number": "$purchase_order_number",
              "segment_title": "$segment_title"
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.purchase_order_number",
            "segment_titles": {
              "$addToSet": "$_id.segment_title"
            }
          }
        },
        {
          "$match": {
            "segment_titles": {
              "$setIsSubset": [
                "$segment_titles",
                [
                  "$segment_title"
                ]
              ]
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "purchase_order_number": "$_id"
          }
        }
      ]
    },
    "error": "Query execution failed: unknown operator: $setIsSubset, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $setIsSubset', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149001, 91), 'signature': {'hash': b'z_\\x1e\\xd5F\\x1dDf\\x08\\xee\\x8b1`;\\x1c\\xa4\\x19\\\\\\x1c\\x85', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149001, 91)}"
  },
  {
    "line_number": 209,
    "question": "List departments that never use certain Acquisition Methods",
    "error": "Error processing question: Error generating query: Expecting value: line 8 column 13 (char 127)"
  },
  {
    "line_number": 211,
    "question": "Find Item Names ordered only on specific days of week",
    "error": "Error processing question: Error generating query: Expecting ',' delimiter: line 15 column 28 (char 252)"
  },
  {
    "line_number": 212,
    "question": "Count orders where Requisition Number follows non-standard pattern",
    "error": "Error processing question: Error generating query: Expecting value: line 8 column 23 (char 137)"
  },
  {
    "line_number": 214,
    "question": "List Purchase Order Numbers with highest variety of Commodity Titles",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$unwind": "$classification_codes"
        },
        {
          "$group": {
            "_id": {
              "purchase_order_number": "$purchase_order_number",
              "commodity_title": "$commodity_title"
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.purchase_order_number",
            "commodity_titles": {
              "$addToSet": "$_id.commodity_title"
            },
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "purchase_order_number": "$_id",
            "commodity_title_variety": {
              "$size": "$commodity_titles"
            }
          }
        },
        {
          "$sort": {
            "commodity_title_variety": -1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting., full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting.', 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149021, 19), 'signature': {'hash': b'\\xa8T\\xc1\\x91s_\\xda\\xe0\\x9a8\\xd5\\x13\\xb6Z|c\\x82\\\\\\x83R', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149021, 19)}"
  },
  {
    "line_number": 215,
    "question": "Find cases where Unit Price varies by Location for identical items",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "location": "$location"
            },
            "unit_prices": {
              "$push": "$unit_price"
            }
          }
        },
        {
          "$match": {
            "unit_prices": {
              "$isArray": true,
              "$size": {
                "$gt": 1
              }
            }
          }
        },
        {
          "$unwind": "$unit_prices"
        },
        {
          "$sort": {
            "_id.item_name": 1,
            "_id.location": 1,
            "unit_prices": 1
          }
        },
        {
          "$group": {
            "_id": {
              "item_name": "$_id.item_name",
              "location": "$_id.location"
            },
            "unit_prices": {
              "$push": "$unit_prices"
            }
          }
        },
        {
          "$match": {
            "unit_prices": {
              "$isArray": true,
              "$size": {
                "$gt": 1
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: unknown operator: $isArray, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $isArray', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149025, 34), 'signature': {'hash': b'}\\xe5\\x85\\x7f\\xf0\\xe85\\xe9\\xfbS\\x97~\\xae\\x98\\xe5#\\xefMVk', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149025, 34)}"
  },
  {
    "line_number": 216,
    "question": "Find Purchase Order Numbers where every item's Unit Price is a multiple of 100",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$unwind": "$item_details"
        },
        {
          "$match": {
            "item_details.unit_price": {
              "$mod": [
                "$item_details.unit_price",
                100
              ]
            }
          }
        },
        {
          "$group": {
            "_id": "$purchase_order_number"
          }
        }
      ]
    },
    "error": "Query execution failed: malformed mod, divisor not a number, full error: {'ok': 0.0, 'errmsg': 'malformed mod, divisor not a number', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149028, 9), 'signature': {'hash': b'\\x15\\x08[\\xdd&\\xb3[\\xe1p\\x02=\\x1d\\tY\\xb0d\\rp\\xb2Y', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149028, 9)}"
  },
  {
    "line_number": 218,
    "question": "Show suppliers whose Total Price sum increases every quarter",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$sort": {
            "purchase_date": 1
          }
        },
        {
          "$group": {
            "_id": {
              "supplier_name": "$supplier_name",
              "quarter": {
                "$concat": [
                  {
                    "$toString": {
                      "$year": "$purchase_date"
                    }
                  },
                  "-Q",
                  {
                    "$toString": {
                      "$add": [
                        {
                          "$ceil": {
                            "$divide": [
                              {
                                "$month": "$purchase_date"
                              },
                              3
                            ]
                          }
                        },
                        0
                      ]
                    }
                  }
                ]
              }
            },
            "total_price": {
              "$sum": "$total_price"
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.supplier_name",
            "quarterly_totals": {
              "$push": {
                "quarter": "$_id.quarter",
                "total_price": "$total_price"
              }
            }
          }
        },
        {
          "$match": {
            "quarterly_totals": {
              "$reduce": {
                "input": {
                  "$slice": [
                    "$quarterly_totals",
                    1,
                    {
                      "$size": "$quarterly_totals"
                    }
                  ]
                },
                "initial_value": true,
                "in": {
                  "$let": {
                    "vars": {
                      "prev": {
                        "$arrayElemAt": [
                          "$$value.quarterly_totals",
                          {
                            "$subtract": [
                              {
                                "$indexOfArray": [
                                  "$$value.quarterly_totals",
                                  "$$this"
                                ]
                              },
                              1
                            ]
                          }
                        ]
                      }
                    },
                    "in": {
                      "$and": [
                        "$$value.initialValue",
                        {
                          "$gt": [
                            "$$this.total_price",
                            "$$prev.total_price"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: unknown operator: $reduce, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $reduce', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149036, 18), 'signature': {'hash': b'57\\x9d\\x13\\x16\\xcfc\\xb7i}\\x19\\x0fF\\xd2W\\xe6i\\x95\\xcb\\xe7', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149036, 18)}"
  },
  {
    "line_number": 219,
    "question": "List Item Names where Quantity ordered follows Fibonacci sequence",
    "error": "Error processing question: Error generating query: Invalid control character at: line 16 column 44 (char 294)"
  },
  {
    "line_number": 220,
    "question": "Count Purchase Order Numbers created during last hour of each month",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "hour": {
              "$hour": "$creation_date"
            },
            "day": {
              "$dayOfMonth": "$creation_date"
            }
          }
        },
        {
          "$match": {
            "hour": 23,
            "day": {
              "$dayOfMonth": {
                "$dayOfMonth": "$creation_date"
              }
            }
          }
        },
        {
          "$group": {
            "_id": null,
            "count": {
              "$sum": 1
            }
          }
        }
      ]
    },
    "error": "Query execution failed: unknown operator: $dayOfMonth, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $dayOfMonth', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149042, 19), 'signature': {'hash': b'\\x84\\x9e]\\x84\\xd2\\xd7\\xc4z\\xad\\x00\\x19\\xd8[\\xde\\xbb46@uH', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149042, 19)}"
  },
  {
    "line_number": 221,
    "question": "Find departments that alternate between different Supplier Codes for same Item Name",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "item_name": "$item_name"
            },
            "supplier_codes": {
              "$addToSet": "$supplier_code"
            }
          }
        },
        {
          "$match": {
            "supplier_codes": {
              "$gt": 1
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149044, 22), 'signature': {'hash': b'J\\xfb\\x81:\\xac&^\\x17\\x00h\\xf4p\\x11N\\xbam\\x19=\\xc82', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149044, 22)}"
  },
  {
    "line_number": 222,
    "question": "Show cases where Unit Price differs by more than 50% across Locations for same day",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "creation_date": "$creation_date",
              "location": "$location"
            },
            "unit_prices": {
              "$push": "$unit_price"
            }
          }
        },
        {
          "$unwind": "$unit_prices"
        },
        {
          "$group": {
            "_id": {
              "item_name": "$_id.item_name",
              "creation_date": "$_id.creation_date"
            },
            "unit_prices": {
              "$push": "$unit_prices"
            },
            "locations": {
              "$push": "$_id.location"
            }
          }
        },
        {
          "$match": {
            "unit_prices": {
              "$let": {
                "vars": {
                  "max": {
                    "$max": "$unit_prices"
                  },
                  "min": {
                    "$min": "$unit_prices"
                  }
                },
                "in": {
                  "$gt": [
                    {
                      "$divide": [
                        {
                          "$subtract": [
                            "$$max",
                            "$$min"
                          ]
                        },
                        "$$min"
                      ]
                    },
                    0.5
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: unknown operator: $let, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $let', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149048, 6), 'signature': {'hash': b'(\\x96\\xca\\xc0\\xb4\\xed\\xa4\\x15j\\x84\\x0f\\x13\\xcc\\x0c.\\x8bc\\xf1 \\x8f', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149048, 6)}"
  },
  {
    "line_number": 225,
    "question": "Show Purchase Order Numbers with longest gap between consecutive items",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$sort": {
            "purchase_order_number": 1,
            "creation_date": 1
          }
        },
        {
          "$group": {
            "_id": "$purchase_order_number",
            "items": {
              "$push": {
                "creation_date": "$creation_date"
              }
            }
          }
        },
        {
          "$project": {
            "_id": 1,
            "date_gaps": {
              "$map": {
                "input": {
                  "$slice": [
                    {
                      "$zip": {
                        "inputs": [
                          "$items.creation_date",
                          {
                            "$concatArrays": [
                              [
                                null
                              ],
                              "$items.creation_date"
                            ]
                          }
                        ]
                      }
                    },
                    1,
                    -1
                  ]
                },
                "as": "pair",
                "in": {
                  "$subtract": [
                    "$$pair.date_gap",
                    "$$pair.date"
                  ]
                }
              }
            }
          }
        },
        {
          "$unwind": "$date_gaps"
        },
        {
          "$sort": {
            "date_gaps": -1
          }
        },
        {
          "$limit": 1
        },
        {
          "$project": {
            "_id": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149061, 27), 'signature': {'hash': b'\\xfd\\xf7|]\\xd4\\xfe\\n/\\xc9`;\\x08f\\xfb#^\\xc7\\x1d\\xa6\\x1f', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149061, 27)}"
  },
  {
    "line_number": 226,
    "question": "Find Supplier Names that appear with multiple Supplier Codes",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "supplier_name": "$supplier_name"
            },
            "supplier_codes": {
              "$addToSet": "$supplier_code"
            }
          }
        },
        {
          "$match": {
            "supplier_codes": {
              "$size": {
                "$gt": 1
              }
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "supplier_name": "$_id.supplier_name",
            "supplier_codes": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Failed to parse $size. Expected a number in: $size: { $gt: 1 }, full error: {'ok': 0.0, 'errmsg': 'Failed to parse $size. Expected a number in: $size: { $gt: 1 }', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149064, 30), 'signature': {'hash': b'E\\x06T\\xf2\\xf2~*\\x81_K\\xd3<\\xa41\\xbf[vz\\x9f\\x0b', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149064, 30)}"
  },
  {
    "line_number": 228,
    "question": "Count cases where Item Name appears under different Family Titles",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "family_title": "$family_title"
            },
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.item_name",
            "family_titles": {
              "$push": {
                "family_title": "$_id.family_title",
                "count": "$count"
              }
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "item_name": "$_id",
            "family_titles": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149072, 9), 'signature': {'hash': b';\\x14>\\xfbN{z4&\\x19\\xda{\\x12\\xf32p0\\x8e_\\xc8', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149072, 9)}"
  },
  {
    "line_number": 229,
    "question": "Show orders where Total Price is exactly same across different months",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "total_price": "$total_price",
              "month": {
                "$month": "$purchase_date"
              }
            },
            "orders": {
              "$push": "$$root"
            }
          }
        },
        {
          "$match": {
            "orders.1": {
              "$exists": true
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "orders": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Use of undefined variable: root, full error: {'ok': 0.0, 'errmsg': 'Use of undefined variable: root', 'code': 17276, 'codeName': 'Location17276', '$clusterTime': {'clusterTime': Timestamp(1737149075, 29), 'signature': {'hash': b'E\\xff\\xca\\x17w\\xdc+C2\\xa6y\\xc6PI\\x12\\xe6\\x08J\\x80r', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149075, 29)}"
  },
  {
    "line_number": 230,
    "question": "Find Item Names with consistent weekly order pattern by Location",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "location": "$location"
            },
            "purchases": {
              "$push": {
                "date": "$purchase_date",
                "quantity": "$quantity"
              }
            }
          }
        },
        {
          "$addFields": {
            "weekly_pattern": {
              "$map": {
                "input": {
                  "$range": [
                    0,
                    7,
                    1
                  ]
                },
                "in": {
                  "$sum": {
                    "$map": {
                      "input": "$purchases",
                      "in": {
                        "$cond": [
                          {
                            "$eq": [
                              {
                                "$dayOfWeek": "$$this.date"
                              },
                              "$$this"
                            ]
                          },
                          "$$this.quantity",
                          0
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "$match": {
            "$expr": {
              "$reduce": {
                "input": "$weekly_pattern",
                "initial_value": true,
                "in": {
                  "$and": [
                    "$$value",
                    {
                      "$ne": [
                        "$$this",
                        0
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "error": "Query execution failed: $reduce found an unknown argument: initial_value, full error: {'ok': 0.0, 'errmsg': '$reduce found an unknown argument: initial_value', 'code': 40076, 'codeName': 'Location40076', '$clusterTime': {'clusterTime': Timestamp(1737149080, 17), 'signature': {'hash': b'\\xe59\\xa7\\x9ag\\xb7\\x01\\xcd\\x18\\x8b\\xc7\\xf9\\x18S2\\xc1)\\xf0O\\x9a', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149080, 17)}"
  },
  {
    "line_number": 231,
    "question": "List Purchase Order Numbers where every item has prime number Quantity",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$unwind": "$item_details"
        },
        {
          "$redact": {
            "$cond": {
              "if": {
                "$anyElementTrue": {
                  "$map": {
                    "input": {
                      "$range": [
                        2,
                        {
                          "$add": [
                            {
                              "$ceil": {
                                "$sqrt": "$item_details.quantity"
                              }
                            },
                            1
                          ]
                        }
                      ]
                    },
                    "as": "n",
                    "in": {
                      "$eq": [
                        {
                          "$mod": [
                            "$item_details.quantity",
                            "$$n"
                          ]
                        },
                        0
                      ]
                    }
                  }
                }
              },
              "then": "$$prune",
              "else": "$$descend"
            }
          }
        },
        {
          "$group": {
            "_id": "$purchase_order_number"
          }
        }
      ]
    },
    "error": "Query execution failed: Use of undefined variable: prune, full error: {'ok': 0.0, 'errmsg': 'Use of undefined variable: prune', 'code': 17276, 'codeName': 'Location17276', '$clusterTime': {'clusterTime': Timestamp(1737149084, 22), 'signature': {'hash': b'#\\x04\\x9dZg\\xd6zn;\\xca\\xfb\\xa4\\x893\\x08\\x0b\\x9d1/z', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149084, 22)}"
  },
  {
    "line_number": 235,
    "question": "List cases where same Item Name has different Commodity Titles",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "commodity_title": "$commodity_title"
            },
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$group": {
            "_id": "$_id.item_name",
            "commodity_titles": {
              "$push": {
                "commodity_title": "$_id.commodity_title",
                "count": "$count"
              }
            }
          }
        },
        {
          "$match": {
            "commodity_titles.count": {
              "$gt": 1
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149096, 2), 'signature': {'hash': b'\\x97\\x8ex\\xc66\\r+/}\\xb1\\xd9\\xca\\xf5KqS\\x9a\\x00\\x88\\xc3', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149096, 2)}"
  },
  {
    "line_number": 237,
    "question": "Find departments that always use same Supplier Code for specific Item Names",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "department_name": "$department_name",
              "item_name": "$item_name"
            },
            "supplier_codes": {
              "$addToSet": "$supplier_code"
            }
          }
        },
        {
          "$match": {
            "supplier_codes": {
              "$size": 1
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "department_name": "$_id.department_name",
            "item_name": "$_id.item_name",
            "supplier_code": {
              "$arrayElemAt": [
                "$supplier_codes",
                0
              ]
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149103, 6), 'signature': {'hash': b'\\xb9Y?i\\xdfhD\\xcdo\\x1fA\\xf5\\xda\\xdbX\\xean\\xb5z+', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149103, 6)}"
  },
  {
    "line_number": 240,
    "question": "Show cases where Unit Price varies by time of day for same Item Name",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "hour": {
                "$hour": "$purchase_date"
              }
            },
            "unit_prices": {
              "$push": "$unit_price"
            }
          }
        },
        {
          "$unwind": "$unit_prices"
        },
        {
          "$sort": {
            "_id.item_name": 1,
            "_id.hour": 1,
            "unit_prices": 1
          }
        },
        {
          "$group": {
            "_id": "$_id.item_name",
            "varying_prices": {
              "$push": {
                "hour": "$_id.hour",
                "unit_price": "$unit_prices"
              }
            }
          }
        },
        {
          "$match": {
            "varying_prices.unit_price": {
              "$ne": null
            },
            "$expr": {
              "$gt": [
                {
                  "$size": {
                    "$setUnion": [
                      "$varying_prices.unit_price",
                      []
                    ]
                  }
                },
                1
              ]
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149116, 78), 'signature': {'hash': b'\\x13\\x8b!\\xda\\xedn\\x14c\\x08K>\\x1c\\xa8\\x9cv\\x15g\\x859E', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149116, 78)}"
  },
  {
    "line_number": 241,
    "question": "Sum Total Price by Department Name where Purchase Date between '2014-01-01' and '2014-03-31'",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 243,
    "question": "List Item Names where Unit Price is between 100 and 500 in Q2 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 244,
    "question": "Show daily order count where Creation Date is in May 2014 grouped by Location",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 251,
    "question": "Find items where average Quantity per month exceeds 100 units",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "month": {
              "$dateToString": {
                "format": "%Y-%m",
                "date": "$purchase_date"
              }
            }
          }
        },
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "month": "$month"
            },
            "total_quantity": {
              "$sum": "$quantity"
            }
          }
        },
        {
          "$addFields": {
            "avg_quantity_per_month": {
              "$divide": [
                "$total_quantity",
                {
                  "$divide": [
                    {
                      "$dateDiff": {
                        "start_date": {
                          "$dateFromString": {
                            "date_string": {
                              "$concat": [
                                {
                                  "$arrayElemAt": [
                                    {
                                      "$split": [
                                        "$_id.month",
                                        "-"
                                      ]
                                    },
                                    0
                                  ]
                                },
                                "-",
                                {
                                  "$arrayElemAt": [
                                    {
                                      "$split": [
                                        "$_id.month",
                                        "-"
                                      ]
                                    },
                                    1
                                  ]
                                },
                                "-01"
                              ]
                            }
                          }
                        },
                        "end_date": {
                          "$add": [
                            {
                              "$dateFromString": {
                                "date_string": {
                                  "$concat": [
                                    {
                                      "$arrayElemAt": [
                                        {
                                          "$split": [
                                            "$_id.month",
                                            "-"
                                          ]
                                        },
                                        0
                                      ]
                                    },
                                    "-",
                                    {
                                      "$arrayElemAt": [
                                        {
                                          "$split": [
                                            "$_id.month",
                                            "-"
                                          ]
                                        },
                                        1
                                      ]
                                    },
                                    "-01"
                                  ]
                                }
                              }
                            },
                            {
                              "$dateDiff": {
                                "start_date": {
                                  "$dateFromString": {
                                    "date_string": {
                                      "$concat": [
                                        {
                                          "$arrayElemAt": [
                                            {
                                              "$split": [
                                                "$_id.month",
                                                "-"
                                              ]
                                            },
                                            0
                                          ]
                                        },
                                        "-",
                                        {
                                          "$arrayElemAt": [
                                            {
                                              "$split": [
                                                "$_id.month",
                                                "-"
                                              ]
                                            },
                                            1
                                          ]
                                        },
                                        "-01"
                                      ]
                                    }
                                  }
                                },
                                "end_date": {
                                  "$add": [
                                    {
                                      "$dateFromString": {
                                        "date_string": {
                                          "$concat": [
                                            {
                                              "$arrayElemAt": [
                                                {
                                                  "$split": [
                                                    "$_id.month",
                                                    "-"
                                                  ]
                                                },
                                                0
                                              ]
                                            },
                                            "-",
                                            {
                                              "$arrayElemAt": [
                                                {
                                                  "$split": [
                                                    "$_id.month",
                                                    "-"
                                                  ]
                                                },
                                                1
                                              ]
                                            },
                                            "-01"
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "$dateDiff": {
                                        "start_date": {
                                          "$dateFromString": {
                                            "date_string": {
                                              "$concat": [
                                                {
                                                  "$arrayElemAt": [
                                                    {
                                                      "$split": [
                                                        "$_id.month",
                                                        "-"
                                                      ]
                                                    },
                                                    0
                                                  ]
                                                },
                                                "-",
                                                {
                                                  "$arrayElemAt": [
                                                    {
                                                      "$split": [
                                                        "$_id.month",
                                                        "-"
                                                      ]
                                                    },
                                                    1
                                                  ]
                                                },
                                                "-01"
                                              ]
                                            }
                                          }
                                        },
                                        "end_date": {
                                          "$add": [
                                            {
                                              "$dateFromString": {
                                                "date_string": {
                                                  "$concat": [
                                                    {
                                                      "$arrayElemAt": [
                                                        {
                                                          "$split": [
                                                            "$_id.month",
                                                            "-"
                                                          ]
                                                        },
                                                        0
                                                      ]
                                                    },
                                                    "-",
                                                    {
                                                      "$arrayElemAt": [
                                                        {
                                                          "$split": [
                                                            "$_id.month",
                                                            "-"
                                                          ]
                                                        },
                                                        1
                                                      ]
                                                    },
                                                    "-01"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "$dateDiff": {
                                                "start_date": {
                                                  "$dateFromString": {
                                                    "date_string": {
                                                      "$concat": [
                                                        {
                                                          "$arrayElemAt": [
                                                            {
                                                              "$split": [
                                                                "$_id.month",
                                                                "-"
                                                              ]
                                                            },
                                                            0
                                                          ]
                                                        },
                                                        "-",
                                                        {
                                                          "$arrayElemAt": [
                                                            {
                                                              "$split": [
                                                                "$_id.month",
                                                                "-"
                                                              ]
                                                            },
                                                            1
                                                          ]
                                                        },
                                                        "-01"
                                                      ]
                                                    }
                                                  }
                                                },
                                                "end_date": {
                                                  "$add": [
                                                    {
                                                      "$dateFromString": {
                                                        "date_string": {
                                                          "$concat": [
                                                            {
                                                              "$arrayElemAt": [
                                                                {
                                                                  "$split": [
                                                                    "$_id.month",
                                                                    "-"
                                                                  ]
                                                                },
                                                                0
                                                              ]
                                                            },
                                                            "-",
                                                            {
                                                              "$arrayElemAt": [
                                                                {
                                                                  "$split": [
                                                                    "$_id.month",
                                                                    "-"
                                                                  ]
                                                                },
                                                                1
                                                              ]
                                                            },
                                                            "-01"
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "$dateDiff": {
                                                        "start_date": {
                                                          "$dateFromString": {
                                                            "date_string": {
                                                              "$concat": [
                                                                {
                                                                  "$arrayElemAt": [
                                                                    {
                                                                      "$split": [
                                                                        "$_id.month",
                                                                        "-"
                                                                      ]
                                                                    },
                                                                    0
                                                                  ]
                                                                },
                                                                "-",
                                                                {
                                                                  "$arrayElemAt": [
                                                                    {
                                                                      "$split": [
                                                                        "$_id.month",
                                                                        "-"
                                                                      ]
                                                                    },
                                                                    1
                                                                  ]
                                                                },
                                                                "-01"
                                                              ]
                                                            }
                                                          }
                                                        },
                                                        "end_date": {
                                                          "$add": [
                                                            {
                                                              "$dateFromString": {
                                                                "date_string": {
                                                                  "$concat": [
                                                                    {
                                                                      "$arrayElemAt": [
                                                                        {
                                                                          "$split": [
                                                                            "$_id.month",
                                                                            "-"
                                                                          ]
                                                                        },
                                                                        0
                                                                      ]
                                                                    },
                                                                    "-",
                                                                    {
                                                                      "$arrayElemAt": [
                                                                        {
                                                                          "$split": [
                                                                            "$_id.month",
                                                                            "-"
                                                                          ]
                                                                        },
                                                                        1
                                                                      ]
                                                                    },
                                                                    "-01"
                                                                  ]
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "$dateDiff": {
                                                                "start_date": {
                                                                  "$dateFromString": {
                                                                    "date_string": {
                                                                      "$concat": [
                                                                        {
                                                                          "$arrayElemAt": [
                                                                            {
                                                                              "$split": [
                                                                                "$_id.month",
                                                                                "-"
                                                                              ]
                                                                            },
                                                                            0
                                                                          ]
                                                                        },
                                                                        "-",
                                                                        {
                                                                          "$arrayElemAt": [
                                                                            {
                                                                              "$split": [
                                                                                "$_id.month",
                                                                                "-"
                                                                              ]
                                                                            },
                                                                            1
                                                                          ]
                                                                        },
                                                                        "-01"
                                                                      ]
                                                                    }
                                                                  }
                                                                },
                                                                "end_date": {
                                                                  "$add": [
                                                                    {
                                                                      "$dateFromString": {
                                                                        "date_string": {
                                                                          "$concat": [
                                                                            {
                                                                              "$arrayElemAt": [
                                                                                {
                                                                                  "$split": [
                                                                                    "$_id.month",
                                                                                    "-"
                                                                                  ]
                                                                                },
                                                                                0
                                                                              ]
                                                                            },
                                                                            "-",
                                                                            {
                                                                              "$arrayElemAt": [
                                                                                {
                                                                                  "$split": [
                                                                                    "$_id.month",
                                                                                    "-"
                                                                                  ]
                                                                                },
                                                                                1
                                                                              ]
                                                                            },
                                                                            "-01"
                                                                          ]
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "$dateDiff": {
                                                                        "start_date": {
                                                                          "$dateFromString": {
                                                                            "date_string": {
                                                                              "$concat": [
                                                                                {
                                                                                  "$arrayElemAt": [
                                                                                    {
                                                                                      "$split": [
                                                                                        "$_id.month",
                                                                                        "-"
                                                                                      ]
                                                                                    },
                                                                                    0
                                                                                  ]
                                                                                },
                                                                                "-",
                                                                                {
                                                                                  "$arrayElemAt": [
                                                                                    {
                                                                                      "$split": [
                                                                                        "$_id.month",
                                                                                        "-"
                                                                                      ]
                                                                                    },
                                                                                    1
                                                                                  ]
                                                                                },
                                                                                "-01"
                                                                              ]
                                                                            }
                                                                          }
                                                                        },
                                                                        "unit": "month"
                                                                      }
                                                                    },
                                                                    {
                                                                      "$dateDiff": {
                                                                        "start_date": {
                                                                          "$dateFromString": {
                                                                            "date_string": {
                                                                              "$concat": [
                                                                                {
                                                                                  "$arrayElemAt": [
                                                                                    {
                                                                                      "$split": [
                                                                                        "$_id.month",
                                                                                        "-"
                                                                                      ]
                                                                                    },
                                                                                    0
                                                                                  ]
                                                                                },
                                                                                "-",
                                                                                {
                                                                                  "$arrayElemAt": [
                                                                                    {
                                                                                      "$split": [
                                                                                        "$_id.month",
                                                                                        "-"
                                                                                      ]
                                                                                    },
                                                                                    1
                                                                                  ]
                                                                                },
                                                                                "-01"
                                                                              ]
                                                                            }
                                                                          }
                                                                        },
                                                                        "unit": "day"
                                                                      }
                                                                    }
                                                                  ]
                                                                },
                                                                "unit": "month"
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "unit": "month"
                                                      }
                                                    }
                                                  ]
                                                },
                                                "unit": "month"
                                              }
                                            }
                                          ]
                                        },
                                        "unit": "month"
                                      }
                                    }
                                  ]
                                },
                                "unit": "month"
                              }
                            }
                          ]
                        },
                        "unit": "day"
                      }
                    },
                    30
                  ]
                }
              ]
            }
          }
        },
        {
          "$match": {
            "avg_quantity_per_month": {
              "$gt": 100
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $addFields :: caused by :: Unrecognized argument to $dateDiff: start_date, full error: {'ok': 0.0, 'errmsg': 'Invalid $addFields :: caused by :: Unrecognized argument to $dateDiff: start_date', 'code': 5166302, 'codeName': 'Location5166302', '$clusterTime': {'clusterTime': Timestamp(1737149163, 36), 'signature': {'hash': b\"\\xa1\\xaf\\xe6fl\\\\;\\xf3]+w\\xad\\x11\\xf0x$\\x9b\\x13'0\", 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149163, 36)}"
  },
  {
    "line_number": 252,
    "question": "Sum Total Price by Family Title where Purchase Date in Q1 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 253,
    "question": "List orders where Creation Date > Purchase Date",
    "query": {
      "find": {
        "$query": {
          "creation_date": {
            "$gt": "$purchase_date"
          }
        },
        "$orderby": {
          "creation_date": 1,
          "purchase_date": 1
        }
      }
    },
    "error": "Query execution failed: unknown operator: $query, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $query', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149167, 67), 'signature': {'hash': b'\\xe4W\\xea\\xb4}\"jc\\xf8m\\x8d\\xce\\xec\\xb7J)\\x0f7\\x83\\x9a', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149167, 67)}"
  },
  {
    "line_number": 256,
    "question": "Find Item Names ordered in consecutive months of 2014",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 264,
    "question": "List Item Names ordered by all departments in single month",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 269,
    "question": "List items where Unit Price changed more than 10% between orders",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$sort": {
            "item_name": 1,
            "purchase_date": 1
          }
        },
        {
          "$group": {
            "_id": "$item_name",
            "purchases": {
              "$push": {
                "unit_price": "$unit_price",
                "purchase_date": "$purchase_date"
              }
            }
          }
        },
        {
          "$unwind": "$purchases"
        },
        {
          "$sort": {
            "purchases.purchase_date": 1
          }
        },
        {
          "$group": {
            "_id": "$_id",
            "purchases": {
              "$push": "$purchases"
            },
            "unit_price_changes": {
              "$push": {
                "$cond": [
                  {
                    "$gt": [
                      {
                        "$abs": {
                          "$subtract": [
                            "$purchases.unit_price",
                            {
                              "$arrayElemAt": [
                                "$purchases.unit_price",
                                {
                                  "$indexOfArray": [
                                    "$purchases.unit_price",
                                    "$purchases.unit_price"
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "$multiply": [
                          {
                            "$arrayElemAt": [
                              "$purchases.unit_price",
                              {
                                "$indexOfArray": [
                                  "$purchases.unit_price",
                                  "$purchases.unit_price"
                                ]
                              }
                            ]
                          },
                          0.1
                        ]
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            }
          }
        },
        {
          "$match": {
            "unit_price_changes": {
              "$elemMatch": {
                "$eq": 1
              }
            }
          }
        },
        {
          "$project": {
            "_id": 1,
            "purchases.unit_price": 1,
            "purchases.purchase_date": 1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149220, 11), 'signature': {'hash': b'\\xac\\xe0\\x17H\\xc8\\xba\\x17!\\xa8\\x19\\nE\\xea \\x02\\x81\\xafO\\xcb\\x9b', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149220, 11)}"
  },
  {
    "line_number": 271,
    "question": "How many purchase orders were created in Q2 of the fiscal year 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 8 column 19 (char 144)"
  },
  {
    "line_number": 273,
    "question": "What are the most frequently ordered items across all purchase orders?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$unwind": "$item_name"
        },
        {
          "$group": {
            "_id": "$item_name",
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$sort": {
            "count": -1
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting., full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting.', 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149229, 46), 'signature': {'hash': b'\\xdd;\\x08\\xb3\"\\x07\\xff\\x1a\\x7f\\x03 rK\\x7f\\xec\\xbd\\x97\\xb9|;', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149229, 46)}"
  },
  {
    "line_number": 274,
    "question": "Which supplier provided the highest number of items in Q1 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 280,
    "question": "What is the monthly trend of total spending in 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 284,
    "question": "What is the median spending per purchase order?",
    "error": "Error processing question: Error generating query: Expecting property name enclosed in double quotes: line 37 column 29 (char 852)"
  },
  {
    "line_number": 286,
    "question": "What is the monthly trend in the number of purchase orders for 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 288,
    "question": "How many purchase orders were created in the last month of fiscal year 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 24 column 19 (char 491)"
  },
  {
    "line_number": 289,
    "question": "What was the average total price of orders in Q1 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 290,
    "question": "How many items were purchased in each quarter of 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 298,
    "question": "List all items that were ordered more than 10 times.",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "item_name": "$item_name",
              "item_description": "$item_description"
            },
            "total_quantity": {
              "$sum": "$quantity"
            }
          }
        },
        {
          "$match": {
            "total_quantity": {
              "$gt": 10
            }
          }
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149290, 11), 'signature': {'hash': b'-\\xa3\\x1b\\xa2\\x8e\\x1d[a\\xe7i0$\\\\%oj\\xfa\\x146\\xdf', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149290, 11)}"
  },
  {
    "line_number": 304,
    "question": "What are the top 5 locations with the most frequently ordered items?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "location": "$location",
              "item_name": "$item_name"
            },
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$sort": {
            "count": -1
          }
        },
        {
          "$group": {
            "_id": "$_id.location",
            "top_items": {
              "$push": {
                "item_name": "$_id.item_name",
                "count": "$count"
              }
            },
            "total_count": {
              "$sum": "$count"
            }
          }
        },
        {
          "$sort": {
            "total_count": -1
          }
        },
        {
          "$limit": 5
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting., full error: {'ok': 0.0, 'errmsg': 'PlanExecutor error during aggregation :: caused by :: Sort exceeded memory limit of 33554432 bytes, but did not opt in to external sorting.', 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149303, 91), 'signature': {'hash': b'\\xbe\\x8d\\x8bo\\x01\\xeb\\xc8\\xb2\\x8ac/\\x94\\x1eC\\xf9\\xeb\\xa3\\x8c(\\x86', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149303, 91)}"
  },
  {
    "line_number": 316,
    "question": "Count the number of orders created in September 2013.",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 317,
    "question": "List all purchase orders created between January and March 2014.",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 318,
    "question": "How many purchase orders were created in each fiscal quarter?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$project": {
            "fiscal_quarter": {
              "$concat": [
                {
                  "$substr": [
                    "$fiscal_year",
                    0,
                    4
                  ]
                },
                "-Q",
                {
                  "$toString": {
                    "$dateTruncate": {
                      "date": "$creation_date",
                      "unit": "quarter",
                      "bin_utc": false
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "$group": {
            "_id": "$fiscal_quarter",
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$sort": {
            "_id": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $project :: caused by :: Unrecognized expression '$dateTruncate', full error: {'ok': 0.0, 'errmsg': \"Invalid $project :: caused by :: Unrecognized expression '$dateTruncate'\", 'code': 168, 'codeName': 'InvalidPipelineOperator', '$clusterTime': {'clusterTime': Timestamp(1737149337, 37), 'signature': {'hash': b'\\xff\\x83\\xc7\\xabo1\\xd2i\\x13\\x88j\\xa0\\x0fTo-Sh\\x95\\xb0', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149337, 37)}"
  },
  {
    "line_number": 319,
    "question": "Retrieve all purchase orders with a purchase date in 2013.",
    "error": "Error processing question: Error generating query: Expecting value: line 4 column 15 (char 51)"
  },
  {
    "line_number": 320,
    "question": "What is the total spending for orders created on or after 01 July 2013?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 337,
    "question": "Retrieve all orders created on weekends in 2013.",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 338,
    "question": "What is the total expenditure for orders created in Q3 of fiscal year 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 8 column 19 (char 144)"
  },
  {
    "line_number": 339,
    "question": "List all purchase orders with purchase dates in December 2013.",
    "error": "Error processing question: Error generating query: Expecting value: line 4 column 15 (char 51)"
  },
  {
    "line_number": 360,
    "question": "Which acquisition type had the highest number of transactions in Q4?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 366,
    "question": "Count the number of purchase orders created in the first week of January 2014.",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 369,
    "question": "What is the average total price of orders created in the last quarter of 2013?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 370,
    "question": "Retrieve all orders created on or after 01 October 2013.",
    "error": "Error processing question: Error generating query: Expecting value: line 4 column 15 (char 51)"
  },
  {
    "line_number": 375,
    "question": "What is the distribution of total prices in fiscal year 2013-2014?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$match": {
            "fiscal_year": "2013-2014"
          }
        },
        {
          "$group": {
            "_id": null,
            "prices": {
              "$push": "$total_price"
            }
          }
        },
        {
          "$unwind": "$prices"
        },
        {
          "$bucketAuto": {
            "group_by": "$prices",
            "buckets": 10
          }
        }
      ]
    },
    "error": "Query execution failed: Unrecognized option to $bucketAuto: group_by, full error: {'ok': 0.0, 'errmsg': 'Unrecognized option to $bucketAuto: group_by', 'code': 40245, 'codeName': 'Location40245', '$clusterTime': {'clusterTime': Timestamp(1737149466, 34), 'signature': {'hash': b'\\x83\\xa8\\xbc`Q\\xdc*\\xaaX\\x8a\\x8f\\xc5\\x7f\\xe2\\x8f\\x915\\xbb\\xb2\\xbd', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149466, 34)}"
  },
  {
    "line_number": 383,
    "question": "Which item description appears most frequently in the dataset?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": "$item_description",
            "count": {
              "$sum": 1
            }
          }
        },
        {
          "$sort": {
            "count": -1
          }
        },
        {
          "$limit": 1
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149484, 13), 'signature': {'hash': b'\\xcca\\xd1[\\xb5\\xe0\\t\"\\xc2\\xa0\\xef\\xc8<\\x02\\x10\\xb9\\x8el\\xb1\\xfd', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149484, 13)}"
  },
  {
    "line_number": 398,
    "question": "Retrieve all orders created in the second half of 2013.",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 402,
    "question": "How many orders have total prices that are multiples of $1,000?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$project": {
            "total_price": 1,
            "is_multiple_of_1000": {
              "$isMultiple": [
                "$total_price",
                1000
              ]
            }
          }
        },
        {
          "$match": {
            "is_multiple_of_1000": true
          }
        },
        {
          "$count": "num_orders"
        }
      ]
    },
    "error": "Query execution failed: Invalid $project :: caused by :: Unknown expression $isMultiple, full error: {'ok': 0.0, 'errmsg': 'Invalid $project :: caused by :: Unknown expression $isMultiple', 'code': 31325, 'codeName': 'Location31325', '$clusterTime': {'clusterTime': Timestamp(1737149523, 18), 'signature': {'hash': b'U\\xbe`\\x88\\xa0\\xfan.\\x90\\x14W4\\xe2.\\xc8\\x88\\xf7\\xf7\\xc6\\x88', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149523, 18)}"
  },
  {
    "line_number": 415,
    "question": "List all unique item descriptions associated with 'NON-IT Goods'.",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 111)"
  },
  {
    "line_number": 421,
    "question": "Which zip code had the most number of unique suppliers providing goods?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": "$supplier_zip_code",
            "unique_suppliers": {
              "$addToSet": "$supplier_name"
            }
          }
        },
        {
          "$project": {
            "zip_code": "$_id",
            "num_unique_suppliers": {
              "$size": "$unique_suppliers"
            }
          }
        },
        {
          "$sort": {
            "num_unique_suppliers": -1
          }
        },
        {
          "$limit": 1
        }
      ]
    },
    "error": "Query execution failed: PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in, full error: {'ok': 0.0, 'errmsg': \"PlanExecutor error during aggregation :: caused by :: Exceeded memory limit for $group, but didn't allow external spilling; pass allowDiskUse:true to opt in\", 'code': 292, 'codeName': 'QueryExceededMemoryLimitNoDiskUseAllowed', '$clusterTime': {'clusterTime': Timestamp(1737149600, 8), 'signature': {'hash': b'-tD\\xc0\\xd3\\x99!\\xfc\\xbc\\xa3\\xe6\\t\\xdb\\xa7\\x92\\x08\\xb7Ei(', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149600, 8)}"
  },
  {
    "line_number": 426,
    "question": "Count the number of purchase orders created in each quarter of the fiscal year.",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$project": {
            "quarter": {
              "$concat": [
                {
                  "$substr": [
                    "$fiscal_year",
                    0,
                    4
                  ]
                },
                "-Q",
                {
                  "$toString": {
                    "$dateTrunc": {
                      "date": "$creation_date",
                      "unit": "quarter",
                      "bin_size": 1
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "$group": {
            "_id": "$quarter",
            "count": {
              "$sum": 1
            }
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $project :: caused by :: Unrecognized argument to $dateTrunc: bin_size. Expected arguments are date, unit, and optionally, binSize, timezone, startOfWeek, full error: {'ok': 0.0, 'errmsg': 'Invalid $project :: caused by :: Unrecognized argument to $dateTrunc: bin_size. Expected arguments are date, unit, and optionally, binSize, timezone, startOfWeek', 'code': 5439008, 'codeName': 'Location5439008', '$clusterTime': {'clusterTime': Timestamp(1737149611, 17), 'signature': {'hash': b'\\xce\\xb1\\x8c\\xd5\\x13\\x83\\xe3\\xfc\\x8c\\x8f\\x19\\xeb\\x16\\x9bpH\\xaf\\x82\\x19\\xcd', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149611, 17)}"
  },
  {
    "line_number": 427,
    "question": "Which day of the month had the highest number of orders in 2013?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 428,
    "question": "How many purchase orders were created in the last week of fiscal year 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 8 column 19 (char 144)"
  },
  {
    "line_number": 429,
    "question": "Retrieve all orders created on public holidays (if dates are specified).",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "is_holiday": {
              "$isHoliday": "$creation_date"
            }
          }
        },
        {
          "$match": {
            "is_holiday": true
          }
        }
      ]
    },
    "error": "Query execution failed: Invalid $addFields :: caused by :: Unrecognized expression '$isHoliday', full error: {'ok': 0.0, 'errmsg': \"Invalid $addFields :: caused by :: Unrecognized expression '$isHoliday'\", 'code': 168, 'codeName': 'InvalidPipelineOperator', '$clusterTime': {'clusterTime': Timestamp(1737149618, 19), 'signature': {'hash': b'T\\x88\\xe2\\xceRp\\x99\\x13\\xae\\x8e\\xaf\\x93\\xfd\\x93\\xd1\\xdaG\\x98<\\xb5', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149618, 19)}"
  },
  {
    "line_number": 430,
    "question": "How many orders were created between 01 December 2013 and 15 January 2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 434,
    "question": "How many orders have a total price that is less than the total price of the top 10 orders combined?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$sort": {
            "total_price": -1
          }
        },
        {
          "$limit": 10
        },
        {
          "$group": {
            "_id": null,
            "top10_total": {
              "$sum": "$total_price"
            }
          }
        },
        {
          "$lookup": {
            "from": "procurement_data",
            "pipeline": [
              {
                "$match": {
                  "total_price": {
                    "$lt": "$top10_total"
                  }
                }
              },
              {
                "$count": "count"
              }
            ],
            "as": "lessThanTop10"
          }
        },
        {
          "$unwind": "$less_than_top10"
        },
        {
          "$replaceRoot": {
            "new_root": "$less_than_top10"
          }
        }
      ]
    },
    "error": "Query execution failed: BSON field '$replaceRoot.new_root' is an unknown field., full error: {'ok': 0.0, 'errmsg': \"BSON field '$replaceRoot.new_root' is an unknown field.\", 'code': 40415, 'codeName': 'IDLUnknownField', '$clusterTime': {'clusterTime': Timestamp(1737149645, 23), 'signature': {'hash': b'M\\xad\\xcc\\xe0j\\xb4ie\\x99\\x90N\\x8f\\xf83V\\xfc\\xd7\\x9d\\xbe\\x07', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149645, 23)}"
  },
  {
    "line_number": 435,
    "question": "Retrieve all orders where the total price is greater than the median total price of the dataset.",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": null,
            "median_total_price": {
              "$arrayElemAt": [
                {
                  "$sort": {
                    "sort_by": {
                      "$multiply": [
                        {
                          "$cond": [
                            {
                              "$isNumber": "$total_price"
                            },
                            1,
                            0
                          ]
                        },
                        1
                      ]
                    },
                    "array": "$total_price"
                  }
                },
                {
                  "$floor": {
                    "$divide": [
                      {
                        "$size": {
                          "$filter": {
                            "input": "$total_price",
                            "cond": {
                              "$isNumber": "$$this"
                            }
                          }
                        }
                      },
                      2
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "$match": {
            "total_price": {
              "$gt": "$median_total_price"
            }
          }
        }
      ]
    },
    "error": "Query execution failed: The $arrayElemAt accumulator is a unary operator, full error: {'ok': 0.0, 'errmsg': 'The $arrayElemAt accumulator is a unary operator', 'code': 40237, 'codeName': 'Location40237', '$clusterTime': {'clusterTime': Timestamp(1737149649, 15), 'signature': {'hash': b'\\x99\\xa2\\xc0\\t\\xb0G\\xa8\\xfe\\xf4\\xfb)\\xb6\\xf8\\xb0\\xdex\\x94\\xad\\x01\\xae', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149649, 15)}"
  },
  {
    "line_number": 438,
    "question": "Retrieve all suppliers who have transactions only in Q1 of the fiscal year.",
    "error": "Error processing question: Error generating query: Expecting value: line 11 column 46 (char 216)"
  },
  {
    "line_number": 440,
    "question": "How many suppliers have supplied both 'IT Goods' and 'NON-IT Goods'?",
    "error": "Error processing question: Error generating query: Expecting value: line 37 column 13 (char 673)"
  },
  {
    "line_number": 441,
    "question": "What is the most frequently purchased commodity title in Q2 2013-2014?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 453,
    "question": "List all orders originating from coordinates in the range 38.5 to 39.0 latitude.",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$geoNear": {
            "near": {
              "type": "Point",
              "coordinates": [
                0,
                38.75
              ]
            },
            "distance_field": "distance",
            "max_distance": 0.5,
            "spherical": true
          }
        }
      ]
    },
    "error": "Query execution failed: $geoNear requires a 'distanceField' argument, full error: {'ok': 0.0, 'errmsg': \"$geoNear requires a 'distanceField' argument\", 'code': 25278, 'codeName': 'Location25278', '$clusterTime': {'clusterTime': Timestamp(1737149691, 6), 'signature': {'hash': b'\\x03\\x89\\x08\\xbf\\xdba\\x8f\\x03\\xf4Um\\xcf\\xca\\x9ar\\xde:\\n\\x80\\xd6', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149691, 6)}"
  },
  {
    "line_number": 454,
    "question": "Which location had the highest expenditure for 'NON-IT Goods'?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 111)"
  },
  {
    "line_number": 458,
    "question": "Retrieve all orders created on the first and last day of each fiscal year.",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "first_day_of_year": {
              "$dateFromParts": {
                "year": "$fiscal_year",
                "month": 1,
                "day": 1
              }
            },
            "last_day_of_year": {
              "$dateFromParts": {
                "year": "$fiscal_year",
                "month": 12,
                "day": 31
              }
            }
          }
        },
        {
          "$match": {
            "$or": [
              {
                "creation_date": {
                  "$dayOfYear": 1,
                  "$year": "$fiscal_year"
                }
              },
              {
                "creation_date": {
                  "$dayOfYear": 365,
                  "$year": "$fiscal_year"
                }
              }
            ]
          }
        }
      ]
    },
    "error": "Query execution failed: unknown operator: $dayOfYear, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $dayOfYear', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149708, 1), 'signature': {'hash': b'w\\xc0]&\\xae=\\xc5\\xd5\\xd9\\x90+;\\xd6o0\\xe5\\x99z\\x81\\x02', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149708, 1)}"
  },
  {
    "line_number": 459,
    "question": "How many orders were created on holidays (if specified dates are known)?",
    "error": "Error processing question: Error generating query: Expecting ',' delimiter: line 15 column 30 (char 335)"
  },
  {
    "line_number": 460,
    "question": "What is the total expenditure for orders created in the second half of 2013?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 462,
    "question": "What is the ratio of total price to unit price for each order?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$addFields": {
            "price_ratio": {
              "$divide": [
                "$total_price",
                "$unit_price"
              ]
            }
          }
        },
        {
          "$project": {
            "_id": 0,
            "purchase_order_number": 1,
            "price_ratio": 1
          }
        }
      ]
    },
    "error": "Query execution failed: Executor error during getMore :: caused by :: can't $divide by zero, full error: {'ok': 0.0, 'errmsg': \"Executor error during getMore :: caused by :: can't $divide by zero\", 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149717, 16), 'signature': {'hash': b'F\\xd8e\\x86\\x9aH>\\x9dP\\xd6\\xa6X\\xdc\\x80_cL[+Q', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149717, 16)}"
  },
  {
    "line_number": 466,
    "question": "List all suppliers with orders in every quarter of fiscal year 2013-2014.",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$match": {
            "fiscal_year": "2013-2014"
          }
        },
        {
          "$bucketAuto": {
            "group_by": "$supplier_name",
            "buckets": 4,
            "output": {
              "supplier": {
                "$first": "$supplier_name"
              }
            }
          }
        },
        {
          "$match": {
            "buckets_pop": 4
          }
        },
        {
          "$replaceRoot": {
            "new_root": "$supplier"
          }
        }
      ]
    },
    "error": "Query execution failed: Unrecognized option to $bucketAuto: group_by, full error: {'ok': 0.0, 'errmsg': 'Unrecognized option to $bucketAuto: group_by', 'code': 40245, 'codeName': 'Location40245', '$clusterTime': {'clusterTime': Timestamp(1737149727, 71), 'signature': {'hash': b'8~3\\xa3o2\\x17\\x14\\xa93\\xcf\\x11\\t\\xf6\\x8a\\x9d7\\x02\\xa9~', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149727, 71)}"
  },
  {
    "line_number": 467,
    "question": "Which supplier had the highest total price in December 2013?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 472,
    "question": "What is the total spending for each family title across all classification codes?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$unwind": "$classification_codes"
        },
        {
          "$lookup": {
            "from": "classification_data",
            "local_field": "classification_codes",
            "foreign_field": "code",
            "as": "classification_details"
          }
        },
        {
          "$unwind": "$classification_details"
        },
        {
          "$group": {
            "_id": "$classification_details.family_title",
            "total_spending": {
              "$sum": "$total_price"
            }
          }
        }
      ]
    },
    "error": "Query execution failed: unknown argument to $lookup: local_field, full error: {'ok': 0.0, 'errmsg': 'unknown argument to $lookup: local_field', 'code': 9, 'codeName': 'FailedToParse', '$clusterTime': {'clusterTime': Timestamp(1737149744, 6), 'signature': {'hash': b'x\\x03\\xd0\\xc7\\xbb\\xf4\\xc4q\\xfbA\\x9b[\\xec\\xb0\\rZN\\xb6T4', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149744, 6)}"
  },
  {
    "line_number": 480,
    "question": "What is the most common acquisition type for orders created in Q1?",
    "error": "Error processing question: Error generating query: Expecting value: line 7 column 19 (char 108)"
  },
  {
    "line_number": 484,
    "question": "Retrieve all orders where the location field contains both a zip code and coordinates.",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$match": {
            "location": {
              "$type": "object",
              "$and": [
                {
                  "location.zip_code": {
                    "$exists": true
                  }
                },
                {
                  "location.coordinates": {
                    "$exists": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "error": "Query execution failed: unknown operator: $and, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $and', 'code': 2, 'codeName': 'BadValue', '$clusterTime': {'clusterTime': Timestamp(1737149771, 85), 'signature': {'hash': b'\\x9c\\x92n\\xf6\\xceb$OM_\\xc9#\\x127\\xe3AF\\x08\\x8b\\x9c', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149771, 85)}"
  },
  {
    "line_number": 485,
    "question": "Which location had the highest total quantity of orders grouped by fiscal year?",
    "query": {
      "aggregate": true,
      "pipeline": [
        {
          "$group": {
            "_id": {
              "location": "$location",
              "fiscal_year": "$fiscal_year"
            },
            "total_quantity": {
              "$sum": "$quantity"
            }
          }
        },
        {
          "$sort": {
            "total_quantity": -1
          }
        },
        {
          "$group": {
            "_id": "$_id.fiscal_year",
            "max_quantity": {
              "$max": "$total_quantity"
            },
            "location_data": {
              "$first": "$$root"
            }
          }
        },
        {
          "$replaceRoot": {
            "new_root": {
              "$mergeObjects": [
                "$location_data",
                {
                  "max_quantity": "$max_quantity"
                }
              ]
            }
          }
        },
        {
          "$sort": {
            "max_quantity": -1
          }
        },
        {
          "$limit": 1
        }
      ]
    },
    "error": "Query execution failed: Use of undefined variable: root, full error: {'ok': 0.0, 'errmsg': 'Use of undefined variable: root', 'code': 17276, 'codeName': 'Location17276', '$clusterTime': {'clusterTime': Timestamp(1737149775, 14), 'signature': {'hash': b'\\xf7_\\xee\\n\\xd8\\x94\\xdf\\xa4\\xbb\\xd6\\xc7%\\x9e(\\xe7\\xc9\\xfa\\x86\\x0c\\x07', 'keyId': 7406416418981281798}}, 'operationTime': Timestamp(1737149775, 14)}"
  }
]